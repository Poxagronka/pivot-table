/**
 * Settings Functions - All dialog and settings management
 * Handles target eROAS, growth thresholds, auto-cache, auto-update, and other settings
 */

// =============================================================================
// CLEAR DATA FUNCTIONS
// =============================================================================

/**
 * Show clear data dialog
 */
function showClearDataDialog() {
  const ui = SpreadsheetApp.getUi();
  
  const result = ui.alert(
    'üóëÔ∏è Clear All Data',
    'Which project data would you like to clear?\n\n' +
    '‚Ä¢ Click YES to select a specific project\n' +
    '‚Ä¢ Click NO to clear ALL projects\n' +
    '‚Ä¢ Click CANCEL to abort\n\n' +
    'Note: Comments will be preserved and can be restored.',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (result === ui.Button.CANCEL) {
    return;
  } else if (result === ui.Button.YES) {
    // Show project selection
    showProjectSelectionForClear();
  } else if (result === ui.Button.NO) {
    // Clear all projects
    clearAllProjectsData();
  }
}

/**
 * Show project selection for clearing data
 */
function showProjectSelectionForClear() {
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.prompt(
    'Select Project to Clear',
    'Enter project name to clear:\n\n' +
    '‚Ä¢ TRICKY\n' +
    '‚Ä¢ MOLOCO\n' +
    '‚Ä¢ REGULAR',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const projectName = response.getResponseText().toUpperCase().trim();
    if (['TRICKY', 'MOLOCO', 'REGULAR'].includes(projectName)) {
      clearProjectAllData(projectName);
    } else {
      ui.alert('Invalid Project', 'Please enter a valid project name.', ui.ButtonSet.OK);
    }
  }
}

/**
 * Clear all projects data
 */
function clearAllProjectsData() {
  const ui = SpreadsheetApp.getUi();
  
  const confirm = ui.alert(
    'Confirm Clear All',
    'This will clear data from ALL projects:\n' +
    '‚Ä¢ Tricky\n' +
    '‚Ä¢ Moloco\n' +
    '‚Ä¢ Regular\n\n' +
    'Comments will be preserved.\n\n' +
    'Are you sure?',
    ui.ButtonSet.YES_NO
  );
  
  if (confirm !== ui.Button.YES) {
    return;
  }
  
  const progress = new ProgressManager('Clearing All Data').start('Initializing...');
  
  try {
    const projects = ['TRICKY', 'MOLOCO', 'REGULAR'];
    
    projects.forEach((projectName, index) => {
      progress.update(
        `Clearing ${projectName} data...`,
        `Processing project ${index + 1} of ${projects.length}`
      );
      
      // Save comments first
      try {
        const config = getProjectConfig(projectName);
        const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
        const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
        
        if (sheet && sheet.getLastRow() > 1) {
          expandAllGroups(sheet);
          const cache = new CommentCache(projectName);
          cache.syncCommentsFromSheet();
        }
        
        clearProjectDataSilent(projectName);
      } catch (error) {
        console.error(`Error clearing ${projectName}:`, error);
      }
    });
    
    progress.end();
    ui.alert('Success', 'All project data has been cleared. Comments have been preserved.', ui.ButtonSet.OK);
    
  } catch (error) {
    progress.end(false);
    ui.alert('Error', 'Error clearing data: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// =============================================================================
// QUICK API CHECK
// =============================================================================

/**
 * Show quick API check dialog
 */
function showQuickAPICheckDialog() {
  const ui = SpreadsheetApp.getUi();
  
  const response = ui.prompt(
    'üîç Quick API Check',
    'Enter project name to check:\n\n' +
    '‚Ä¢ TRICKY\n' +
    '‚Ä¢ MOLOCO\n' +
    '‚Ä¢ REGULAR\n' +
    '‚Ä¢ ALL (check all projects)',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (response.getSelectedButton() === ui.Button.OK) {
    const input = response.getResponseText().toUpperCase().trim();
    
    if (input === 'ALL') {
      checkAllProjectsAPI();
    } else if (['TRICKY', 'MOLOCO', 'REGULAR'].includes(input)) {
      checkProjectAPI(input);
    } else {
      ui.alert('Invalid Input', 'Please enter a valid project name or ALL.', ui.ButtonSet.OK);
    }
  }
}

/**
 * Check API for specific project
 */
function checkProjectAPI(projectName) {
  const ui = SpreadsheetApp.getUi();
  
  try {
    setCurrentProject(projectName);
    const dateRange = getDateRange(7);
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert(
        `${projectName} API Check`,
        `‚ùå API returned no data for the last 7 days.\n\n` +
        'Possible issues:\n' +
        '‚Ä¢ No campaigns active in this period\n' +
        '‚Ä¢ API token may be expired\n' +
        '‚Ä¢ Network configuration may be incorrect',
        ui.ButtonSet.OK
      );
    } else {
      const count = raw.data.analytics.richStats.stats.length;
      ui.alert(
        `${projectName} API Check`,
        `‚úÖ API is working!\n\n` +
        `‚Ä¢ Records found: ${count}\n` +
        `‚Ä¢ Period: Last 7 days\n` +
        `‚Ä¢ Status: Connected successfully`,
        ui.ButtonSet.OK
      );
    }
  } catch (error) {
    ui.alert(
      `${projectName} API Check`,
      `‚ùå API Error:\n\n${error.toString()}\n\n` +
      'Please check:\n' +
      '‚Ä¢ Internet connection\n' +
      '‚Ä¢ API token validity\n' +
      '‚Ä¢ Project configuration',
      ui.ButtonSet.OK
    );
  }
}

/**
 * Check API for all projects
 */
function checkAllProjectsAPI() {
  const ui = SpreadsheetApp.getUi();
  const projects = ['TRICKY', 'MOLOCO', 'REGULAR'];
  let results = 'üîç API CHECK RESULTS\n\n';
  
  projects.forEach(projectName => {
    try {
      setCurrentProject(projectName);
      const dateRange = getDateRange(7);
      const raw = fetchCampaignData(dateRange);
      
      if (!raw.data?.analytics?.richStats?.stats?.length) {
        results += `‚ùå ${projectName}: No data returned\n`;
      } else {
        const count = raw.data.analytics.richStats.stats.length;
        results += `‚úÖ ${projectName}: ${count} records found\n`;
      }
    } catch (error) {
      results += `‚ùå ${projectName}: ${error.toString().substring(0, 50)}...\n`;
    }
  });
  
  ui.alert('API Check Complete', results, ui.ButtonSet.OK);
}

// =============================================================================
// PROJECT SETTINGS OVERVIEW
// =============================================================================

/**
 * Show project settings dialog with current configuration
 */
function showProjectSettings() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  
  // Get current settings
  const cacheEnabled = props.getProperty(PROPERTY_KEYS.AUTO_CACHE_ENABLED) === 'true';
  const updateEnabled = props.getProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED) === 'true';
  
  const trickyTarget = getTargetEROAS('TRICKY');
  const molocoTarget = getTargetEROAS('MOLOCO');
  const regularTarget = getTargetEROAS('REGULAR');
  
  const trickyThresholds = getGrowthThresholds('TRICKY');
  const molocoThresholds = getGrowthThresholds('MOLOCO');
  const regularThresholds = getGrowthThresholds('REGULAR');
  
  const message = 
    'üéØ PROJECT CONFIGURATION\n\n' +
    
    'üìä TRICKY:\n' +
    `‚Ä¢ Target eROAS: ${trickyTarget}%\n` +
    `‚Ä¢ Growth Thresholds: Healthy(${trickyThresholds.healthyGrowth.minSpendChange}%/${trickyThresholds.healthyGrowth.minProfitChange}%), Scaling(${trickyThresholds.scalingDown.maxSpendChange}%)\n` +
    `‚Ä¢ Network HID: 234187180623265792\n` +
    `‚Ä¢ Campaign Filter: /tricky/i (INCLUDE)\n\n` +
    
    'üî• MOLOCO:\n' +
    `‚Ä¢ Target eROAS: ${molocoTarget}%\n` +
    `‚Ä¢ Growth Thresholds: Healthy(${molocoThresholds.healthyGrowth.minSpendChange}%/${molocoThresholds.healthyGrowth.minProfitChange}%), Scaling(${molocoThresholds.scalingDown.maxSpendChange}%)\n` +
    `‚Ä¢ Network HID: 445856363109679104\n` +
    `‚Ä¢ Campaign Filter: NO FILTER (all campaigns)\n\n` +
    
    'üìà REGULAR:\n' +
    `‚Ä¢ Target eROAS: ${regularTarget}%\n` +
    `‚Ä¢ Growth Thresholds: Healthy(${regularThresholds.healthyGrowth.minSpendChange}%/${regularThresholds.healthyGrowth.minProfitChange}%), Scaling(${regularThresholds.scalingDown.maxSpendChange}%)\n` +
    `‚Ä¢ Network HID: 234187180623265792\n` +
    `‚Ä¢ Campaign Filter: !/tricky/i (EXCLUDE)\n\n` +
    
    '‚öôÔ∏è AUTOMATION:\n' +
    `‚Ä¢ Auto Cache: ${cacheEnabled ? '‚úÖ Enabled (2 AM daily)' : '‚ùå Disabled'}\n` +
    `‚Ä¢ Auto Update: ${updateEnabled ? '‚úÖ Enabled (Monday 5 AM)' : '‚ùå Disabled'}\n\n` +
    
    'üìù FEATURES:\n' +
    '‚Ä¢ Week-level comments: ‚úÖ Supported\n' +
    '‚Ä¢ Campaign-level comments: ‚úÖ Supported\n' +
    '‚Ä¢ Comment preservation: ‚úÖ Active\n' +
    '‚Ä¢ Group management: ‚úÖ Auto-collapse\n' +
    '‚Ä¢ Project-specific thresholds: ‚úÖ Active';
  
  ui.alert('Project Settings', message, ui.ButtonSet.OK);
}

// =============================================================================
// GROWTH THRESHOLD SETTINGS
// =============================================================================

/**
 * Show detailed growth threshold settings for a project
 */
function showGrowthThresholdDetails(projectName) {
  const ui = SpreadsheetApp.getUi();
  const thresholds = getGrowthThresholds(projectName);
  
  const message = 
    `üìä ${projectName} GROWTH THRESHOLDS\n\n` +
    
    'üü¢ HEALTHY GROWTH:\n' +
    `‚Ä¢ Min Spend Change: ${thresholds.healthyGrowth.minSpendChange}%\n` +
    `‚Ä¢ Min Profit Change: ${thresholds.healthyGrowth.minProfitChange}%\n\n` +
    
    'üî¥ INEFFICIENT GROWTH:\n' +
    `‚Ä¢ Min Spend Change: ${thresholds.inefficientGrowth.minSpendChange}%\n` +
    `‚Ä¢ Max Profit Change: ${thresholds.inefficientGrowth.maxProfitChange}%\n\n` +
    
    'üîµ SCALING DOWN:\n' +
    `‚Ä¢ Max Spend Change: ${thresholds.scalingDown.maxSpendChange}%\n\n` +
    
    'üü° MODERATE GROWTH:\n' +
    `‚Ä¢ Min Spend Change: ${thresholds.moderateGrowthSpend}%\n` +
    `‚Ä¢ Min Profit Change: ${thresholds.moderateGrowthProfit}%\n\n` +
    
    '‚ö™ STABLE:\n' +
    '‚Ä¢ All other scenarios';
  
  ui.alert(`${projectName} Growth Thresholds`, message, ui.ButtonSet.OK);
}

/**
 * Quick threshold adjustment dialog
 */
function quickAdjustThresholds(projectName) {
  const ui = SpreadsheetApp.getUi();
  const current = getGrowthThresholds(projectName);
  
  const result = ui.alert(
    `Quick Adjust - ${projectName}`,
    'Which threshold would you like to adjust?\n\n' +
    `Current Healthy Growth: Spend >${current.healthyGrowth.minSpendChange}%, Profit >${current.healthyGrowth.minProfitChange}%\n` +
    `Current Scaling Down: Spend <${current.scalingDown.maxSpendChange}%\n\n` +
    'YES = Adjust Healthy Growth\n' +
    'NO = Adjust Scaling Down\n' +
    'CANCEL = Exit',
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (result === ui.Button.CANCEL) return;
  
  const newThresholds = { ...current };
  
  if (result === ui.Button.YES) {
    // Adjust Healthy Growth
    const spendResponse = ui.prompt(
      'Healthy Growth - Spend Threshold',
      `Enter minimum spend change % for Healthy Growth (current: ${current.healthyGrowth.minSpendChange}%):`,
      ui.ButtonSet.OK_CANCEL
    );
    
    if (spendResponse.getSelectedButton() === ui.Button.OK) {
      const spendValue = parseInt(spendResponse.getResponseText());
      if (!isNaN(spendValue) && spendValue >= 0 && spendValue <= 100) {
        newThresholds.healthyGrowth.minSpendChange = spendValue;
      }
    }
    
    const profitResponse = ui.prompt(
      'Healthy Growth - Profit Threshold',
      `Enter minimum profit change % for Healthy Growth (current: ${current.healthyGrowth.minProfitChange}%):`,
      ui.ButtonSet.OK_CANCEL
    );
    
    if (profitResponse.getSelectedButton() === ui.Button.OK) {
      const profitValue = parseInt(profitResponse.getResponseText());
      if (!isNaN(profitValue) && profitValue >= -50 && profitValue <= 100) {
        newThresholds.healthyGrowth.minProfitChange = profitValue;
        // Update inefficient growth to match spend threshold
        newThresholds.inefficientGrowth.minSpendChange = newThresholds.healthyGrowth.minSpendChange;
      }
    }
    
  } else {
    // Adjust Scaling Down
    const scalingResponse = ui.prompt(
      'Scaling Down Threshold',
      `Enter maximum spend change % for Scaling Down (current: ${current.scalingDown.maxSpendChange}%):`,
      ui.ButtonSet.OK_CANCEL
    );
    
    if (scalingResponse.getSelectedButton() === ui.Button.OK) {
      const scalingValue = parseInt(scalingResponse.getResponseText());
      if (!isNaN(scalingValue) && scalingValue >= -100 && scalingValue <= 0) {
        newThresholds.scalingDown.maxSpendChange = scalingValue;
      }
    }
  }
  
  // Save updated thresholds
  setGrowthThresholds(projectName, newThresholds);
  ui.alert('‚úÖ Updated', `${projectName} thresholds have been updated!`, ui.ButtonSet.OK);
}

// =============================================================================
// AUTO CACHE SETTINGS
// =============================================================================

/**
 * Show auto cache settings dialog
 */
function showAutoCacheSettings() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const isEnabled = props.getProperty(PROPERTY_KEYS.AUTO_CACHE_ENABLED) === 'true';
  
  const result = ui.alert(
    'üíæ Auto Cache Settings',
    `Auto-cache is currently: ${isEnabled ? '‚úÖ ENABLED' : '‚ùå DISABLED'}\n\n` +
    'When enabled, comments from all projects will be automatically cached at 2:00 AM daily.\n\n' +
    'All row groups will be collapsed after caching to keep the sheet organized.\n\n' +
    `Would you like to ${isEnabled ? 'DISABLE' : 'ENABLE'} auto-cache?`,
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (result === ui.Button.YES) {
    if (isEnabled) {
      // Disable auto-cache
      disableAutoCache();
    } else {
      // Enable auto-cache
      enableAutoCache();
    }
  }
}

/**
 * Enable auto cache with 2AM daily trigger
 */
function enableAutoCache() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Remove any existing triggers
    ScriptApp.getProjectTriggers()
      .filter(trigger => trigger.getHandlerFunction() === 'autoCacheAllProjects')
      .forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    // Create new trigger for 2AM
    ScriptApp.newTrigger('autoCacheAllProjects')
      .timeBased()
      .atHour(2)
      .everyDays(1)
      .create();
    
    // Save enabled state
    const props = PropertiesService.getScriptProperties();
    props.setProperty(PROPERTY_KEYS.AUTO_CACHE_ENABLED, 'true');
    
    ui.alert(
      'Auto Cache Enabled',
      '‚úÖ Auto-cache has been enabled!\n\n' +
      '‚Ä¢ Comments will be cached daily at 2:00 AM\n' +
      '‚Ä¢ All projects (Tricky, Moloco, Regular) will be cached\n' +
      '‚Ä¢ Row groups will be collapsed after caching',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Failed to enable auto-cache: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Disable auto cache
 */
function disableAutoCache() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Remove triggers
    const triggers = ScriptApp.getProjectTriggers()
      .filter(trigger => trigger.getHandlerFunction() === 'autoCacheAllProjects');
    
    triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    // Save disabled state
    const props = PropertiesService.getScriptProperties();
    props.setProperty(PROPERTY_KEYS.AUTO_CACHE_ENABLED, 'false');
    
    ui.alert(
      'Auto Cache Disabled',
      '‚ùå Auto-cache has been disabled.\n\n' +
      'Comments will no longer be cached automatically.',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Failed to disable auto-cache: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// =============================================================================
// AUTO UPDATE SETTINGS
// =============================================================================

/**
 * Show auto update settings dialog
 */
function showAutoUpdateSettings() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const isEnabled = props.getProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED) === 'true';
  
  const result = ui.alert(
    'üîÑ Auto Update Settings',
    `Auto-update is currently: ${isEnabled ? '‚úÖ ENABLED' : '‚ùå DISABLED'}\n\n` +
    'When enabled, all project data will be automatically updated every Monday at 5:00 AM.\n\n' +
    'This will fetch new data including the previous complete week.\n\n' +
    `Would you like to ${isEnabled ? 'DISABLE' : 'ENABLE'} auto-update?`,
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (result === ui.Button.YES) {
    if (isEnabled) {
      // Disable auto-update
      disableAutoUpdate();
    } else {
      // Enable auto-update
      enableAutoUpdate();
    }
  }
}

/**
 * Enable auto update with Monday 5AM trigger
 */
function enableAutoUpdate() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Remove any existing triggers
    ScriptApp.getProjectTriggers()
      .filter(trigger => trigger.getHandlerFunction() === 'autoUpdateAllProjects')
      .forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    // Create new trigger for Monday 5AM
    ScriptApp.newTrigger('autoUpdateAllProjects')
      .timeBased()
      .onWeekDay(ScriptApp.WeekDay.MONDAY)
      .atHour(5)
      .create();
    
    // Save enabled state
    const props = PropertiesService.getScriptProperties();
    props.setProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED, 'true');
    
    ui.alert(
      'Auto Update Enabled',
      '‚úÖ Auto-update has been enabled!\n\n' +
      '‚Ä¢ Data will be updated every Monday at 5:00 AM\n' +
      '‚Ä¢ All projects will include the previous week\'s data\n' +
      '‚Ä¢ Comments will be preserved during updates',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Failed to enable auto-update: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Disable auto update
 */
function disableAutoUpdate() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Remove triggers
    const triggers = ScriptApp.getProjectTriggers()
      .filter(trigger => trigger.getHandlerFunction() === 'autoUpdateAllProjects');
    
    triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    // Save disabled state
    const props = PropertiesService.getScriptProperties();
    props.setProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED, 'false');
    
    ui.alert(
      'Auto Update Disabled',
      '‚ùå Auto-update has been disabled.\n\n' +
      'Data will no longer be updated automatically on Mondays.',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Failed to disable auto-update: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// =============================================================================
// AUTOMATION STATUS
// =============================================================================

/**
 * Complete automation status display
 */
function getCompleteAutomationStatus() {
  const props = PropertiesService.getScriptProperties();
  
  const cacheEnabled = props.getProperty(PROPERTY_KEYS.AUTO_CACHE_ENABLED) === 'true';
  const updateEnabled = props.getProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED) === 'true';
  
  // Get trigger info
  const triggers = ScriptApp.getProjectTriggers();
  const cacheTrigger = triggers.find(t => t.getHandlerFunction() === 'autoCacheAllProjects');
  const updateTrigger = triggers.find(t => t.getHandlerFunction() === 'autoUpdateAllProjects');
  
  let statusMessage = 'üìä AUTOMATION STATUS\n\n';
  
  // Cache status
  statusMessage += 'üíæ AUTO CACHE:\n';
  if (cacheEnabled && cacheTrigger) {
    statusMessage += '‚úÖ Enabled - Runs daily at 2:00 AM\n';
    statusMessage += '‚Ä¢ Caches comments from all projects\n';
    statusMessage += '‚Ä¢ Collapses all row groups after caching\n';
  } else if (cacheEnabled && !cacheTrigger) {
    statusMessage += '‚ö†Ô∏è Enabled but trigger missing\n';
    statusMessage += '‚Ä¢ Please disable and re-enable to fix\n';
  } else {
    statusMessage += '‚ùå Disabled\n';
    statusMessage += '‚Ä¢ Comments must be saved manually\n';
  }
  
  statusMessage += '\n';
  
  // Update status
  statusMessage += 'üîÑ AUTO UPDATE:\n';
  if (updateEnabled && updateTrigger) {
    statusMessage += '‚úÖ Enabled - Runs every Monday at 5:00 AM\n';
    statusMessage += '‚Ä¢ Updates all project data\n';
    statusMessage += '‚Ä¢ Includes previous complete week\n';
    statusMessage += '‚Ä¢ Preserves all comments\n';
  } else if (updateEnabled && !updateTrigger) {
    statusMessage += '‚ö†Ô∏è Enabled but trigger missing\n';
    statusMessage += '‚Ä¢ Please disable and re-enable to fix\n';
  } else {
    statusMessage += '‚ùå Disabled\n';
    statusMessage += '‚Ä¢ Data must be updated manually\n';
  }
  
  statusMessage += '\n';
  
  // Trigger count
  statusMessage += '‚è±Ô∏è ACTIVE TRIGGERS:\n';
  statusMessage += `‚Ä¢ Total triggers: ${triggers.length}\n`;
  statusMessage += `‚Ä¢ Cache triggers: ${triggers.filter(t => t.getHandlerFunction() === 'autoCacheAllProjects').length}\n`;
  statusMessage += `‚Ä¢ Update triggers: ${triggers.filter(t => t.getHandlerFunction() === 'autoUpdateAllProjects').length}\n`;
  
  return statusMessage;
}

// =============================================================================
// UTILITY FUNCTIONS FOR SETTINGS
// =============================================================================

/**
 * Clear specific project data with UI confirmation
 */
function clearProjectAllData(projectName) {
  const ui = SpreadsheetApp.getUi();
  
  const confirm = ui.alert(
    `Clear ${projectName} Data`,
    `This will clear all data from the ${projectName} project.\n\n` +
    'Comments will be preserved and can be restored.\n\n' +
    'Are you sure?',
    ui.ButtonSet.YES_NO
  );
  
  if (confirm !== ui.Button.YES) return;
  
  try {
    // Save comments first
    const config = getProjectConfig(projectName);
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache(projectName);
      cache.syncCommentsFromSheet();
    }
    
    // Clear the data
    clearProjectDataSilent(projectName);
    
    ui.alert('Success', `${projectName} data has been cleared. Comments have been preserved.`, ui.ButtonSet.OK);
    
  } catch (error) {
    ui.alert('Error', `Error clearing ${projectName} data: ` + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Test API with custom date range
 */
function testAPIWithDateRange(startDate, endDate) {
  const ui = SpreadsheetApp.getUi();
  
  const choice = showChoice('Select Project for API Test:', ['TRICKY', 'MOLOCO', 'REGULAR']);
  if (!choice) return;
  
  const projectName = ['TRICKY', 'MOLOCO', 'REGULAR'][choice-1];
  
  try {
    setCurrentProject(projectName);
    const dateRange = { from: startDate, to: endDate };
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert(
        `${projectName} API Test`,
        `‚ùå No data returned for period ${startDate} to ${endDate}.\n\n` +
        'The API connection works but no campaigns match the filters.',
        ui.ButtonSet.OK
      );
    } else {
      const count = raw.data.analytics.richStats.stats.length;
      ui.alert(
        `${projectName} API Test`,
        `‚úÖ API test successful!\n\n` +
        `‚Ä¢ Records found: ${count}\n` +
        `‚Ä¢ Period: ${startDate} to ${endDate}\n` +
        `‚Ä¢ Project: ${projectName}`,
        ui.ButtonSet.OK
      );
    }
  } catch (error) {
    ui.alert(
      `${projectName} API Test`,
      `‚ùå API Error:\n\n${error.toString()}`,
      ui.ButtonSet.OK
    );
  }
}

/**
 * Helper function to show choice dialog (if not already defined)
 */
function showChoice(title, options) {
  const ui = SpreadsheetApp.getUi();
  const numbered = options.map((opt, i) => `${i + 1} - ${opt}`).join('\n');
  const result = ui.prompt(title, `${numbered}\n\nEnter number:`, ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  const choice = parseInt(result.getResponseText());
  return (choice >= 1 && choice <= options.length) ? choice : null;
}
