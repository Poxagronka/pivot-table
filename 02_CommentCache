/**
 * Comment Cache Management - Multi Project Support
 * Handles saving and loading comments from a hidden sheet
 * Includes automatic caching functionality at 2AM daily
 * NOW SUPPORTS CAMPAIGN-LEVEL COMMENTS
 */
class CommentCache {
  constructor(projectName = null) {
    // If no project specified, use current project
    this.projectName = projectName || CURRENT_PROJECT;
    this.config = projectName ? getProjectConfig(projectName) : getCurrentConfig();
    this.cacheSheet = this.getOrCreateCacheSheet();
  }

  /**
   * Get or create the comments cache sheet for current project
   */
  getOrCreateCacheSheet() {
    const spreadsheet = SpreadsheetApp.openById(this.config.SHEET_ID);
    let sheet = spreadsheet.getSheetByName(this.config.COMMENTS_CACHE_SHEET);
    if (!sheet) {
      sheet = spreadsheet.insertSheet(this.config.COMMENTS_CACHE_SHEET);
      sheet.hideSheet();
      // Headers: AppName, WeekRange, CampaignId, SourceApp, Comment, LastUpdated
      sheet.getRange(1, 1, 1, 6).setValues([['AppName', 'WeekRange', 'CampaignId', 'SourceApp', 'Comment', 'LastUpdated']]);
    }
    return sheet;
  }

  /**
   * Generate a unique key for comment identification
   * Supports both WEEK-level and CAMPAIGN-level comments
   */
  getCommentKey(appName, weekRange, campaignId = null, sourceApp = null) {
    if (campaignId && sourceApp) {
      // Campaign-level comment
      return `${appName}|||${weekRange}|||${campaignId}|||${sourceApp}`;
    } else {
      // Week-level comment
      return `${appName}|||${weekRange}|||WEEK|||WEEK`;
    }
  }

  /**
   * Load all comments from cache sheet
   */
  loadAllComments() {
    const comments = {};
    const data = this.cacheSheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      const [appName, weekRange, campaignId, sourceApp, comment, lastUpdated] = data[i];
      if (comment) {
        const key = this.getCommentKey(appName, weekRange, campaignId, sourceApp);
        comments[key] = comment;
      }
    }
    return comments;
  }

  /**
   * Save a comment to cache
   */
  saveComment(appName, weekRange, comment, campaignId = null, sourceApp = null) {
    if (!comment || !comment.trim()) return;
    
    const data = this.cacheSheet.getDataRange().getValues();
    let found = false;
    
    // Update existing or add new
    for (let i = 1; i < data.length; i++) {
      const rowAppName = data[i][0];
      const rowWeekRange = data[i][1];
      const rowCampaignId = data[i][2];
      const rowSourceApp = data[i][3];
      
      if (rowAppName === appName && 
          rowWeekRange === weekRange && 
          rowCampaignId === (campaignId || 'WEEK') && 
          rowSourceApp === (sourceApp || 'WEEK')) {
        // Only update if new comment is longer (appending text)
        const existingComment = data[i][4] || '';
        if (comment.length > existingComment.length) {
          this.cacheSheet.getRange(i + 1, 5, 1, 2).setValues([[comment, new Date()]]);
        }
        found = true;
        break;
      }
    }
    
    if (!found) {
      const lastRow = this.cacheSheet.getLastRow();
      this.cacheSheet.getRange(lastRow + 1, 1, 1, 6).setValues([[
        appName, 
        weekRange, 
        campaignId || 'WEEK', 
        sourceApp || 'WEEK', 
        comment, 
        new Date()
      ]]);
    }
  }

  /**
   * Sync comments from the main sheet to cache
   */
  syncCommentsFromSheet() {
    const spreadsheet = SpreadsheetApp.openById(this.config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(this.config.SHEET_NAME);
    if (!sheet || sheet.getLastRow() < 2) return;
    
    // Expand all groups to ensure we can read all data
    expandAllGroups(sheet);
    
    const data = sheet.getDataRange().getValues();
    let currentApp = '';
    let currentWeek = '';
    
    for (let i = 1; i < data.length; i++) {
      const level = data[i][0];
      const nameOrRange = data[i][1];
      const campaignId = data[i][2]; // ID column
      const comment = data[i][15]; // Comments column
      
      if (level === 'APP') {
        currentApp = nameOrRange;
        currentWeek = '';
      } else if (level === 'WEEK' && currentApp) {
        currentWeek = nameOrRange;
        if (comment) {
          // Save week-level comment
          this.saveComment(currentApp, currentWeek, comment);
        }
      } else if (level === 'CAMPAIGN' && currentApp && currentWeek && comment) {
        // Save campaign-level comment
        const sourceApp = nameOrRange; // Source App name
        const campaignIdValue = campaignId && typeof campaignId === 'string' && campaignId.includes('HYPERLINK') 
          ? this.extractCampaignIdFromHyperlink(campaignId) 
          : campaignId;
        
        this.saveComment(currentApp, currentWeek, comment, campaignIdValue, sourceApp);
      }
    }
  }

  /**
   * Extract campaign ID from HYPERLINK formula
   */
  extractCampaignIdFromHyperlink(hyperlinkFormula) {
    try {
      // Extract from =HYPERLINK("https://app.appgrowth.com/campaigns/12345", "12345")
      const match = hyperlinkFormula.match(/campaigns\/([^"]+)/);
      return match ? match[1] : 'Unknown';
    } catch (e) {
      return 'Unknown';
    }
  }

  /**
   * Apply cached comments back to the main sheet
   */
  applyCommentsToSheet() {
    const spreadsheet = SpreadsheetApp.openById(this.config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(this.config.SHEET_NAME);
    if (!sheet || sheet.getLastRow() < 2) return;
    
    const comments = this.loadAllComments();
    const data = sheet.getDataRange().getValues();
    let currentApp = '';
    let currentWeek = '';
    
    for (let i = 1; i < data.length; i++) {
      const level = data[i][0];
      const nameOrRange = data[i][1];
      const campaignId = data[i][2]; // ID column
      
      if (level === 'APP') {
        currentApp = nameOrRange;
        currentWeek = '';
      } else if (level === 'WEEK' && currentApp) {
        currentWeek = nameOrRange;
        // Apply week-level comment
        const weekKey = this.getCommentKey(currentApp, currentWeek);
        const weekComment = comments[weekKey];
        if (weekComment) {
          sheet.getRange(i + 1, 16).setValue(weekComment); // Comments column
        }
      } else if (level === 'CAMPAIGN' && currentApp && currentWeek) {
        // Apply campaign-level comment
        const sourceApp = nameOrRange; // Source App name
        const campaignIdValue = campaignId && typeof campaignId === 'string' && campaignId.includes('HYPERLINK') 
          ? this.extractCampaignIdFromHyperlink(campaignId) 
          : campaignId;
        
        const campaignKey = this.getCommentKey(currentApp, currentWeek, campaignIdValue, sourceApp);
        const campaignComment = comments[campaignKey];
        if (campaignComment) {
          sheet.getRange(i + 1, 16).setValue(campaignComment); // Comments column
        }
      }
    }
  }

  /**
   * Sync comments from the main sheet to cache (quiet version without expanding groups)
   * Used by auto-cache to avoid interfering with user's group state
   */
  syncCommentsFromSheetQuiet() {
    const spreadsheet = SpreadsheetApp.openById(this.config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(this.config.SHEET_NAME);
    if (!sheet || sheet.getLastRow() < 2) return;
    
    // DON'T expand groups - assume they're already expanded by caller
    const data = sheet.getDataRange().getValues();
    let currentApp = '';
    let currentWeek = '';
    
    for (let i = 1; i < data.length; i++) {
      const level = data[i][0];
      const nameOrRange = data[i][1];
      const campaignId = data[i][2]; // ID column
      const comment = data[i][15]; // Comments column
      
      if (level === 'APP') {
        currentApp = nameOrRange;
        currentWeek = '';
      } else if (level === 'WEEK' && currentApp) {
        currentWeek = nameOrRange;
        if (comment) {
          // Save week-level comment
          this.saveComment(currentApp, currentWeek, comment);
        }
      } else if (level === 'CAMPAIGN' && currentApp && currentWeek && comment) {
        // Save campaign-level comment
        const sourceApp = nameOrRange; // Source App name
        const campaignIdValue = campaignId && typeof campaignId === 'string' && campaignId.includes('HYPERLINK') 
          ? this.extractCampaignIdFromHyperlink(campaignId) 
          : campaignId;
        
        this.saveComment(currentApp, currentWeek, comment, campaignIdValue, sourceApp);
      }
    }
  }
}

/**
 * GROUP MANAGEMENT
 * Enhanced group management for reliable collapsing
 */

/**
 * Collapse all groups recursively - most reliable method
 */
function collapseAllGroupsRecursively(sheet) {
  const maxRows = sheet.getMaxRows();
  let hasCollapsed = true;
  let iterations = 0;
  const maxIterations = 10;
  
  console.log('Starting recursive collapse...');
  
  // Keep collapsing until no more groups can be collapsed
  while (hasCollapsed && iterations < maxIterations) {
    hasCollapsed = false;
    iterations++;
    
    try {
      // Try to collapse the entire sheet
      sheet.getRange(1, 1, maxRows, 1).collapseGroups();
      hasCollapsed = true;
      SpreadsheetApp.flush();
      Utilities.sleep(100); // Small delay between iterations
      console.log(`Iteration ${iterations}: Groups collapsed`);
    } catch (e) {
      // No more groups to collapse
      console.log(`Iteration ${iterations}: No more groups to collapse`);
    }
  }
  
  console.log(`Recursive collapse completed after ${iterations} iterations`);
}

/**
 * Expand all groups in the sheet - used before caching
 */
function expandAllGroups(sheet) {
  try {
    const maxRows = sheet.getMaxRows();
    let expanded = true;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (expanded && attempts < maxAttempts) {
      attempts++;
      try {
        sheet.getRange(1, 1, maxRows, 1).expandGroups();
        SpreadsheetApp.flush();
        Utilities.sleep(50);
      } catch (e) {
        // No more groups to expand
        expanded = false;
      }
    }
    
    console.log(`Groups expanded after ${attempts} attempts`);
  } catch (e) {
    console.log('Error expanding groups:', e);
  }
}
