/**
 * Progress Management - Multi Project Support
 * Used only for manual comment saving to show progress to user
 */
class ProgressManager {
  constructor(title = 'Processing...', projectName = null) {
    this.progressSheet = null;
    this.startTime = new Date();
    this.title = title;
    this.projectName = projectName || CURRENT_PROJECT;
    this.config = projectName ? getProjectConfig(projectName) : getCurrentConfig();
  }

  /**
   * Start showing progress with initial status
   */
  start(initialStatus = 'Initializing...') {
    try {
      const spreadsheet = SpreadsheetApp.openById(this.config.SHEET_ID);
      const sheetName = `${this.title}_${this.projectName}`;
      this.progressSheet = spreadsheet.insertSheet(sheetName);
      
      // Set title with project name
      this.progressSheet.getRange('A1').setValue(`${this.title} - ${this.projectName}`)
        .setFontSize(16).setFontWeight('bold');
      this.progressSheet.getRange('A2').setValue(`Started: ${this.startTime.toLocaleString()}`);
      this.progressSheet.getRange('A3').setValue('Status: ' + initialStatus);
      this.progressSheet.getRange('A4').setValue(`Project: ${this.projectName}`);
      this.progressSheet.getRange('A5').setValue(`Sheet: ${this.config.SHEET_NAME}`);
      this.progressSheet.getRange('A7').setValue('Please wait, do not modify the spreadsheet...');
      this.progressSheet.setColumnWidth(1, 500);
      SpreadsheetApp.flush();
    } catch (e) {
      console.error('Error creating progress sheet:', e);
    }
    return this;
  }

  /**
   * Update progress status
   */
  update(status, details = null) {
    if (!this.progressSheet) return;
    try {
      this.progressSheet.getRange('A3').setValue('Status: ' + status);
      if (details) {
        this.progressSheet.getRange('A6').setValue('Details: ' + details);
      }
      const elapsed = Math.round((new Date() - this.startTime) / 1000);
      this.progressSheet.getRange('A8').setValue(`Elapsed: ${elapsed} seconds`);
      SpreadsheetApp.flush();
    } catch (e) {
      console.error('Error updating progress:', e);
    }
  }

  /**
   * End progress tracking and cleanup
   */
  end(showSuccess = true) {
    if (!this.progressSheet) return;
    try {
      if (showSuccess) {
        this.update('Completed successfully!');
        Utilities.sleep(1500);
      }
      SpreadsheetApp.openById(this.config.SHEET_ID).deleteSheet(this.progressSheet);
    } catch (e) {
      console.error('Error removing progress sheet:', e);
    }
  }
}

/**
 * Project-specific progress manager creators
 */

/**
 * Create progress manager for Tricky project
 */
function createTrickyProgressManager(title = 'Tricky Operation') {
  return new ProgressManager(title, 'TRICKY');
}

/**
 * Create progress manager for Moloco project
 */
function createMolocoProgressManager(title = 'Moloco Operation') {
  return new ProgressManager(title, 'MOLOCO');
}

/**
 * Create progress manager for current project
 */
function createCurrentProjectProgressManager(title = 'Operation') {
  return new ProgressManager(`${title} - ${CURRENT_PROJECT}`, CURRENT_PROJECT);
}

/**
 * Utility functions for progress management
 */

/**
 * Show progress for long-running operations
 */
function withProgress(projectName, title, operation) {
  const progress = new ProgressManager(title, projectName);
  progress.start('Starting operation...');
  
  try {
    const result = operation(progress);
    progress.end(true);
    return result;
  } catch (error) {
    progress.update('Operation failed: ' + error.toString());
    Utilities.sleep(2000);
    progress.end(false);
    throw error;
  }
}

/**
 * Show progress for Tricky operations
 */
function withTrickyProgress(title, operation) {
  return withProgress('TRICKY', title, operation);
}

/**
 * Show progress for Moloco operations
 */
function withMolocoProgress(title, operation) {
  return withProgress('MOLOCO', title, operation);
}

/**
 * Batch operation with progress updates
 */
function batchOperationWithProgress(projectName, title, items, batchSize, operation) {
  const progress = new ProgressManager(title, projectName);
  progress.start(`Processing ${items.length} items in batches of ${batchSize}...`);
  
  try {
    const results = [];
    const totalBatches = Math.ceil(items.length / batchSize);
    
    for (let i = 0; i < items.length; i += batchSize) {
      const batch = items.slice(i, i + batchSize);
      const batchNumber = Math.floor(i / batchSize) + 1;
      
      progress.update(
        `Processing batch ${batchNumber} of ${totalBatches}...`,
        `Items ${i + 1}-${Math.min(i + batchSize, items.length)} of ${items.length}`
      );
      
      const batchResults = operation(batch, i);
      results.push(...batchResults);
      
      // Small delay between batches to avoid quota issues
      if (i + batchSize < items.length) {
        Utilities.sleep(100);
      }
    }
    
    progress.update('All batches completed successfully!');
    progress.end(true);
    return results;
    
  } catch (error) {
    progress.update('Batch operation failed: ' + error.toString());
    Utilities.sleep(2000);
    progress.end(false);
    throw error;
  }
}

/**
 * Multi-project operations with progress
 */

/**
 * Show progress for operations affecting multiple projects
 */
function withMultiProjectProgress(title, projects, operation) {
  const progress = new ProgressManager(title, 'MULTI');
  progress.start(`Starting operation for projects: ${projects.join(', ')}...`);
  
  try {
    const results = {};
    
    projects.forEach((projectName, index) => {
      progress.update(
        `Processing project ${index + 1} of ${projects.length}: ${projectName}`,
        `Working on ${projectName} data...`
      );
      
      results[projectName] = operation(projectName, progress);
    });
    
    progress.update('All projects completed successfully!');
    progress.end(true);
    return results;
    
  } catch (error) {
    progress.update('Multi-project operation failed: ' + error.toString());
    Utilities.sleep(2000);
    progress.end(false);
    throw error;
  }
}

/**
 * Progress reporting utilities
 */

/**
 * Calculate and format progress percentage
 */
function formatProgress(current, total) {
  const percentage = Math.round((current / total) * 100);
  return `${percentage}% (${current}/${total})`;
}

/**
 * Estimate time remaining
 */
function estimateTimeRemaining(startTime, current, total) {
  if (current === 0) return 'Calculating...';
  
  const elapsed = new Date() - startTime;
  const rate = current / elapsed;
  const remaining = (total - current) / rate;
  
  const seconds = Math.round(remaining / 1000);
  if (seconds < 60) return `${seconds}s remaining`;
  
  const minutes = Math.round(seconds / 60);
  if (minutes < 60) return `${minutes}m remaining`;
  
  const hours = Math.round(minutes / 60);
  return `${hours}h remaining`;
}

/**
 * Advanced progress tracking with estimates
 */
class AdvancedProgressManager extends ProgressManager {
  constructor(title = 'Processing...', projectName = null, totalItems = 0) {
    super(title, projectName);
    this.totalItems = totalItems;
    this.currentItem = 0;
  }

  /**
   * Update progress with item count
   */
  updateProgress(currentItem, status = null, details = null) {
    this.currentItem = currentItem;
    
    const progressText = this.totalItems > 0 
      ? formatProgress(currentItem, this.totalItems)
      : `${currentItem} items processed`;
      
    const timeRemaining = this.totalItems > 0
      ? estimateTimeRemaining(this.startTime, currentItem, this.totalItems)
      : '';
    
    const statusText = status || `Processing item ${currentItem}...`;
    const fullStatus = `${statusText} (${progressText})`;
    
    this.update(fullStatus, details ? `${details}\n${timeRemaining}` : timeRemaining);
  }

  /**
   * Increment progress by one item
   */
  incrementProgress(status = null, details = null) {
    this.updateProgress(this.currentItem + 1, status, details);
  }
}

/**
 * Create advanced progress manager for specific project
 */
function createAdvancedProgressManager(projectName, title, totalItems = 0) {
  return new AdvancedProgressManager(title, projectName, totalItems);
}
