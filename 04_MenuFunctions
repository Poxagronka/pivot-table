// =============================================================================
// TRICKY PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Tricky
function generateTrickyReport30() { generateProjectReport('TRICKY', 30); }
function generateTrickyReport60() { generateProjectReport('TRICKY', 60); }
function generateTrickyReport90() { generateProjectReport('TRICKY', 90); }

/**
 * Save Tricky comments to cache manually
 */
function saveTrickyCommentsToCache() {
  setCurrentProject('TRICKY');
  const progress = new ProgressManager('Saving Tricky Comments').start('Preparing sheet...');
  try {
    saveProjectCommentsManual('TRICKY');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Tricky comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Tricky comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Tricky
 */
function showTrickyDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Tricky Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('TRICKY', days);
}

/**
 * Dialog for entering date range for Tricky
 */
function showTrickyDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Tricky Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Tricky Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('TRICKY', startDate, endDate);
}

// =============================================================================
// MOLOCO PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Moloco
function generateMolocoReport30() { generateProjectReport('MOLOCO', 30); }
function generateMolocoReport60() { generateProjectReport('MOLOCO', 60); }
function generateMolocoReport90() { generateProjectReport('MOLOCO', 90); }

/**
 * Save Moloco comments to cache manually
 */
function saveMolocoCommentsToCache() {
  setCurrentProject('MOLOCO');
  const progress = new ProgressManager('Saving Moloco Comments').start('Preparing sheet...');
  try {
    saveProjectCommentsManual('MOLOCO');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Moloco comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Moloco comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Moloco
 */
function showMolocoDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Moloco Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('MOLOCO', days);
}

/**
 * Dialog for entering date range for Moloco
 */
function showMolocoDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Moloco Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Moloco Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('MOLOCO', startDate, endDate);
}

// =============================================================================
// REGULAR PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Regular
function generateRegularReport30() { generateProjectReport('REGULAR', 30); }
function generateRegularReport60() { generateProjectReport('REGULAR', 60); }
function generateRegularReport90() { generateProjectReport('REGULAR', 90); }

/**
 * Save Regular comments to cache manually
 */
function saveRegularCommentsToCache() {
  setCurrentProject('REGULAR');
  const progress = new ProgressManager('Saving Regular Comments').start('Preparing sheet...');
  try {
    saveProjectCommentsManual('REGULAR');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Regular comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Regular comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Regular
 */
function showRegularDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Regular Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('REGULAR', days);
}

/**
 * Dialog for entering date range for Regular
 */
function showRegularDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Regular Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Regular Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('REGULAR', startDate, endDate);
}

// =============================================================================
// UNIVERSAL PROJECT FUNCTIONS
// =============================================================================

/**
 * Generate report for specific project and days
 */
function generateProjectReport(projectName, days) {
  setCurrentProject(projectName);
  generateReport(days);
}

/**
 * Generate report for specific project and date range
 */
function generateProjectReportForDateRange(projectName, startDate, endDate) {
  setCurrentProject(projectName);
  generateReportForDateRange(startDate, endDate);
}

/**
 * Debug project report generation
 */
function debugTrickyReportGeneration() { debugProjectReportGeneration('TRICKY'); }
function debugMolocoReportGeneration() { debugProjectReportGeneration('MOLOCO'); }
function debugRegularReportGeneration() { debugProjectReportGeneration('REGULAR'); }

function debugProjectReportGeneration(projectName) {
  setCurrentProject(projectName);
  debugReportGeneration();
}

// =============================================================================
// LEGACY FUNCTIONS (for backward compatibility)
// =============================================================================

// Keep old function names working, but redirect to Tricky
function generateReport30() { generateTrickyReport30(); }
function generateReport60() { generateTrickyReport60(); }
function generateReport90() { generateTrickyReport90(); }
function saveCommentsToCache() { saveTrickyCommentsToCache(); }
function showDaysDialog() { showTrickyDaysDialog(); }
function showDateRangeDialog() { showTrickyDateRangeDialog(); }
function clearAllData() { clearProjectAllData('TRICKY'); }// =============================================================================
// AUTO UPDATE SETTINGS
// =============================================================================

/**
 * Show auto update settings dialog
 */
function showAutoUpdateSettings() {
  const ui = SpreadsheetApp.getUi();
  const props = PropertiesService.getScriptProperties();
  const isEnabled = props.getProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED) === 'true';
  
  const result = ui.alert(
    '🔄 Auto Update Settings',
    `Auto-update is currently: ${isEnabled ? '✅ ENABLED' : '❌ DISABLED'}\n\n` +
    'When enabled, all project data will be automatically updated every Monday at 5:00 AM.\n\n' +
    'This will fetch new data including the previous complete week.\n\n' +
    `Would you like to ${isEnabled ? 'DISABLE' : 'ENABLE'} auto-update?`,
    ui.ButtonSet.YES_NO_CANCEL
  );
  
  if (result === ui.Button.YES) {
    if (isEnabled) {
      // Disable auto-update
      disableAutoUpdate();
    } else {
      // Enable auto-update
      enableAutoUpdate();
    }
  }
}

/**
 * Enable auto update with Monday 5AM trigger
 */
function enableAutoUpdate() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    // Remove any existing triggers
    ScriptApp.getProjectTriggers()
      .filter(trigger => trigger.getHandlerFunction() === 'autoUpdateAllProjects')
      .forEach(trigger => ScriptApp.deleteTrigger(trigger));
    
    // Create new trigger for Monday 5AM
    ScriptApp.newTrigger('autoUpdateAllProjects')
      .timeBased()
      .onWeekDay(ScriptApp.WeekDay.MONDAY)
      .atHour(5)
      .create();
    
    // Save enabled state
    const props = PropertiesService.getScriptProperties();
    props.setProperty(PROPERTY_KEYS.AUTO_UPDATE_ENABLED, 'true');
    
    ui.alert(
      'Auto Update Enabled',
      '✅ Auto-update has been enabled!\n\n' +
      '• Data will be updated every Monday at 5:00 AM\n' +
      '• All projects will include the previous week\'s data\n' +
      '• Comments will be preserved during updates',
      ui.ButtonSet.OK
    );
    
  } catch (error) {
    ui.alert('Error', 'Failed to enable auto-update: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Show complete automation status
 */
function showAutomationStatus() {
  const ui = SpreadsheetApp.getUi();
  const statusMessage = getCompleteAutomationStatus();
  ui.alert('Automation Status', statusMessage, ui.ButtonSet.OK);
}/**
 * Menu Functions and UI Handlers - Multi Project Support
 * Updated with new menu structure: Settings, Auto-cache, Debug
 */

/**
 * Create custom menu in Google Sheets interface
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Campaign Report')
    .addSubMenu(ui.createMenu('📊 Tricky Reports')
      .addItem('📅 Last 30 days', 'generateTrickyReport30')
      .addItem('📅 Last 60 days', 'generateTrickyReport60')
      .addItem('📅 Last 90 days', 'generateTrickyReport90')
      .addItem('📅 Custom days', 'showTrickyDaysDialog')
      .addItem('📅 Date range', 'showTrickyDateRangeDialog')
      .addSeparator()
      .addItem('⚙️ Target eROAS Settings', 'showTrickyTargetSettings')
    )
    .addSubMenu(ui.createMenu('🔥 Moloco Reports')
      .addItem('📅 Last 30 days', 'generateMolocoReport30')
      .addItem('📅 Last 60 days', 'generateMolocoReport60')
      .addItem('📅 Last 90 days', 'generateMolocoReport90')
      .addItem('📅 Custom days', 'showMolocoDaysDialog')
      .addItem('📅 Date range', 'showMolocoDateRangeDialog')
      .addSeparator()
      .addItem('⚙️ Target eROAS Settings', 'showMolocoTargetSettings')
    )
    .addSubMenu(ui.createMenu('📈 Regular Reports')
      .addItem('📅 Last 30 days', 'generateRegularReport30')
      .addItem('📅 Last 60 days', 'generateRegularReport60')
      .addItem('📅 Last 90 days', 'generateRegularReport90')
      .addItem('📅 Custom days', 'showRegularDaysDialog')
      .addItem('📅 Date range', 'showRegularDateRangeDialog')
      .addSeparator()
      .addItem('⚙️ Target eROAS Settings', 'showRegularTargetSettings')
    )
    .addSeparator()
    .addSubMenu(ui.createMenu('⚙️ Settings')
      .addItem('🎯 Project Overview', 'showProjectSettings')
      .addSeparator()
      .addSubMenu(ui.createMenu('💾 Comment Cache')
        .addItem('💬 Save Tricky Comments', 'saveTrickyCommentsToCache')
        .addItem('💬 Save Moloco Comments', 'saveMolocoCommentsToCache')
        .addItem('💬 Save Regular Comments', 'saveRegularCommentsToCache')
        .addSeparator()
        .addItem('💬 Save All Comments', 'saveAllCommentsToCache')
      )
      .addSeparator()
      .addSubMenu(ui.createMenu('🔄 Auto Updates')
        .addItem('⏰ Auto Cache Settings', 'showAutoCacheSettings')
        .addItem('📅 Auto Update Settings', 'showAutoUpdateSettings')
        .addSeparator()
        .addItem('📊 View Status', 'showAutomationStatus')
      )
      .addSeparator()
      .addItem('🗑️ Clear Data', 'showClearDataDialog')
    )
    .addSubMenu(ui.createMenu('🔧 Debug')
      .addItem('🐛 Debug Tricky', 'debugTrickyReportGeneration')
      .addItem('🐛 Debug Moloco', 'debugMolocoReportGeneration')
      .addItem('🐛 Debug Regular', 'debugRegularReportGeneration')
      .addSeparator()
      .addItem('🔍 Quick API Check', 'showQuickAPICheckDialog')
    )
    .addToUi();
}
