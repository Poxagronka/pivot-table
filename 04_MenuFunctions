/**
 * Menu Functions and UI Handlers - Multi Project Support
 * Contains all menu creation and user interface functions for Tricky, Moloco, and Regular
 */

/**
 * Create custom menu in Google Sheets interface
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Campaign Report')
    .addSubMenu(ui.createMenu('📊 Tricky Reports')
      .addItem('📅 Last 30 days', 'generateTrickyReport30')
      .addItem('📅 Last 60 days', 'generateTrickyReport60')
      .addItem('📅 Last 90 days', 'generateTrickyReport90')
      .addItem('📅 Custom days', 'showTrickyDaysDialog')
      .addItem('📅 Date range', 'showTrickyDateRangeDialog')
      .addSeparator()
      .addItem('🔄 Update all data to current', 'updateTrickyDataToCurrent')
      .addSeparator()
      .addItem('💬 Save comments to cache', 'saveTrickyCommentsToCache')
      .addSeparator()
      .addSubMenu(ui.createMenu('💾 Auto Cache')
        .addItem('▶️ Start auto cache (60 min)', 'startTrickyAutoCache')
        .addItem('⏹️ Stop auto cache', 'stopTrickyAutoCache')
        .addItem('📊 Check status', 'checkTrickyAutoCacheStatus')
        .addSeparator()
        .addItem('🔄 Force cache now', 'forceTrickyCache')
        .addSeparator()
        .addSubMenu(ui.createMenu('🧪 Test Groups')
          .addItem('📥 Test collapse groups', 'testTrickyCollapseGroups')
          .addItem('📤 Test expand groups', 'testTrickyExpandGroups')
        )
        .addSeparator()
        .addItem('🗑️ Clear all triggers', 'clearTrickyAutoCacheTriggers')
      )
      .addItem('🗑️ Clear all data', 'clearTrickyAllData')
      .addSeparator()
      .addSubMenu(ui.createMenu('🔧 Debug')
        .addItem('Full Diagnostic', 'debugTrickyReportGeneration')
        .addItem('Quick API Check', 'quickTrickyAPICheck')
      )
    )
    .addSubMenu(ui.createMenu('🔥 Moloco Reports')
      .addItem('📅 Last 30 days', 'generateMolocoReport30')
      .addItem('📅 Last 60 days', 'generateMolocoReport60')
      .addItem('📅 Last 90 days', 'generateMolocoReport90')
      .addItem('📅 Custom days', 'showMolocoDaysDialog')
      .addItem('📅 Date range', 'showMolocoDateRangeDialog')
      .addSeparator()
      .addItem('🔄 Update all data to current', 'updateMolocoDataToCurrent')
      .addSeparator()
      .addItem('💬 Save comments to cache', 'saveMolocoCommentsToCache')
      .addSeparator()
      .addSubMenu(ui.createMenu('💾 Auto Cache')
        .addItem('▶️ Start auto cache (60 min)', 'startMolocoAutoCache')
        .addItem('⏹️ Stop auto cache', 'stopMolocoAutoCache')
        .addItem('📊 Check status', 'checkMolocoAutoCacheStatus')
        .addSeparator()
        .addItem('🔄 Force cache now', 'forceMolocoCache')
        .addSeparator()
        .addSubMenu(ui.createMenu('🧪 Test Groups')
          .addItem('📥 Test collapse groups', 'testMolocoCollapseGroups')
          .addItem('📤 Test expand groups', 'testMolocoExpandGroups')
        )
        .addSeparator()
        .addItem('🗑️ Clear all triggers', 'clearMolocoAutoCacheTriggers')
      )
      .addItem('🗑️ Clear all data', 'clearMolocoAllData')
      .addSeparator()
      .addSubMenu(ui.createMenu('🔧 Debug')
        .addItem('Full Diagnostic', 'debugMolocoReportGeneration')
        .addItem('Quick API Check', 'quickMolocoAPICheck')
      )
    )
    .addSubMenu(ui.createMenu('📈 Regular Reports')
      .addItem('📅 Last 30 days', 'generateRegularReport30')
      .addItem('📅 Last 60 days', 'generateRegularReport60')
      .addItem('📅 Last 90 days', 'generateRegularReport90')
      .addItem('📅 Custom days', 'showRegularDaysDialog')
      .addItem('📅 Date range', 'showRegularDateRangeDialog')
      .addSeparator()
      .addItem('🔄 Update all data to current', 'updateRegularDataToCurrent')
      .addSeparator()
      .addItem('💬 Save comments to cache', 'saveRegularCommentsToCache')
      .addSeparator()
      .addSubMenu(ui.createMenu('💾 Auto Cache')
        .addItem('▶️ Start auto cache (60 min)', 'startRegularAutoCache')
        .addItem('⏹️ Stop auto cache', 'stopRegularAutoCache')
        .addItem('📊 Check status', 'checkRegularAutoCacheStatus')
        .addSeparator()
        .addItem('🔄 Force cache now', 'forceRegularCache')
        .addSeparator()
        .addSubMenu(ui.createMenu('🧪 Test Groups')
          .addItem('📥 Test collapse groups', 'testRegularCollapseGroups')
          .addItem('📤 Test expand groups', 'testRegularExpandGroups')
        )
        .addSeparator()
        .addItem('🗑️ Clear all triggers', 'clearRegularAutoCacheTriggers')
      )
      .addItem('🗑️ Clear all data', 'clearRegularAllData')
      .addSeparator()
      .addSubMenu(ui.createMenu('🔧 Debug')
        .addItem('Full Diagnostic', 'debugRegularReportGeneration')
        .addItem('Quick API Check', 'quickRegularAPICheck')
      )
    )
    .addSeparator()
    .addItem('⚙️ Project Settings', 'showProjectSettings')
    .addToUi();
}

// =============================================================================
// TRICKY PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Tricky
function generateTrickyReport30() { generateProjectReport('TRICKY', 30); }
function generateTrickyReport60() { generateProjectReport('TRICKY', 60); }
function generateTrickyReport90() { generateProjectReport('TRICKY', 90); }

/**
 * Save Tricky comments to cache manually
 */
function saveTrickyCommentsToCache() {
  setCurrentProject('TRICKY');
  const progress = new ProgressManager('Saving Tricky Comments').start('Preparing sheet...');
  try {
    const config = getCurrentConfig();
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (!sheet || sheet.getLastRow() < 2) {
      progress.end(false);
      SpreadsheetApp.getUi().alert('No data found in the Tricky sheet.');
      return;
    }
    
    progress.update('Expanding all groups...');
    expandAllGroups(sheet);
    
    progress.update('Reading comments from sheet...');
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    progress.update('Comments saved successfully!');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Tricky comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Tricky comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Tricky
 */
function showTrickyDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Tricky Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('TRICKY', days);
}

/**
 * Dialog for entering date range for Tricky
 */
function showTrickyDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Tricky Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Tricky Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('TRICKY', startDate, endDate);
}

/**
 * Update Tricky data to current
 */
function updateTrickyDataToCurrent() {
  updateProjectDataToCurrent('TRICKY');
}

/**
 * Clear Tricky data
 */
function clearTrickyAllData() {
  clearProjectAllData('TRICKY');
}

// Tricky Auto Cache functions
function startTrickyAutoCache() { startProjectAutoCache('TRICKY'); }
function stopTrickyAutoCache() { stopProjectAutoCache('TRICKY'); }
function checkTrickyAutoCacheStatus() { checkProjectAutoCacheStatus('TRICKY'); }
function forceTrickyCache() { forceProjectCache('TRICKY'); }
function clearTrickyAutoCacheTriggers() { clearProjectAutoCacheTriggers('TRICKY'); }

// Tricky Group test functions
function testTrickyCollapseGroups() { testProjectCollapseGroups('TRICKY'); }
function testTrickyExpandGroups() { testProjectExpandGroups('TRICKY'); }

// Tricky Debug functions
function debugTrickyReportGeneration() { debugProjectReportGeneration('TRICKY'); }
function quickTrickyAPICheck() { quickProjectAPICheck('TRICKY'); }

// =============================================================================
// MOLOCO PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Moloco
function generateMolocoReport30() { generateProjectReport('MOLOCO', 30); }
function generateMolocoReport60() { generateProjectReport('MOLOCO', 60); }
function generateMolocoReport90() { generateProjectReport('MOLOCO', 90); }

/**
 * Save Moloco comments to cache manually
 */
function saveMolocoCommentsToCache() {
  setCurrentProject('MOLOCO');
  const progress = new ProgressManager('Saving Moloco Comments').start('Preparing sheet...');
  try {
    const config = getCurrentConfig();
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (!sheet || sheet.getLastRow() < 2) {
      progress.end(false);
      SpreadsheetApp.getUi().alert('No data found in the Moloco sheet.');
      return;
    }
    
    progress.update('Expanding all groups...');
    expandAllGroups(sheet);
    
    progress.update('Reading comments from sheet...');
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    progress.update('Comments saved successfully!');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Moloco comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Moloco comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Moloco
 */
function showMolocoDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Moloco Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('MOLOCO', days);
}

/**
 * Dialog for entering date range for Moloco
 */
function showMolocoDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Moloco Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Moloco Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('MOLOCO', startDate, endDate);
}

/**
 * Update Moloco data to current
 */
function updateMolocoDataToCurrent() {
  updateProjectDataToCurrent('MOLOCO');
}

/**
 * Clear Moloco data
 */
function clearMolocoAllData() {
  clearProjectAllData('MOLOCO');
}

// Moloco Auto Cache functions
function startMolocoAutoCache() { startProjectAutoCache('MOLOCO'); }
function stopMolocoAutoCache() { stopProjectAutoCache('MOLOCO'); }
function checkMolocoAutoCacheStatus() { checkProjectAutoCacheStatus('MOLOCO'); }
function forceMolocoCache() { forceProjectCache('MOLOCO'); }
function clearMolocoAutoCacheTriggers() { clearProjectAutoCacheTriggers('MOLOCO'); }

// Moloco Group test functions
function testMolocoCollapseGroups() { testProjectCollapseGroups('MOLOCO'); }
function testMolocoExpandGroups() { testProjectExpandGroups('MOLOCO'); }

// Moloco Debug functions
function debugMolocoReportGeneration() { debugProjectReportGeneration('MOLOCO'); }
function quickMolocoAPICheck() { quickProjectAPICheck('MOLOCO'); }

// =============================================================================
// REGULAR PROJECT FUNCTIONS
// =============================================================================

// Quick report functions for Regular
function generateRegularReport30() { generateProjectReport('REGULAR', 30); }
function generateRegularReport60() { generateProjectReport('REGULAR', 60); }
function generateRegularReport90() { generateProjectReport('REGULAR', 90); }

/**
 * Save Regular comments to cache manually
 */
function saveRegularCommentsToCache() {
  setCurrentProject('REGULAR');
  const progress = new ProgressManager('Saving Regular Comments').start('Preparing sheet...');
  try {
    const config = getCurrentConfig();
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (!sheet || sheet.getLastRow() < 2) {
      progress.end(false);
      SpreadsheetApp.getUi().alert('No data found in the Regular sheet.');
      return;
    }
    
    progress.update('Expanding all groups...');
    expandAllGroups(sheet);
    
    progress.update('Reading comments from sheet...');
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    progress.update('Comments saved successfully!');
    progress.end();
    SpreadsheetApp.getUi().alert('Success', 'Regular comments have been saved to cache.', SpreadsheetApp.getUi().ButtonSet.OK);
  } catch (e) {
    progress.end(false);
    SpreadsheetApp.getUi().alert('Error', 'Error saving Regular comments: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Dialog for entering number of days for Regular
 */
function showRegularDaysDialog() {
  const ui = SpreadsheetApp.getUi();
  const daysResp = ui.prompt('Regular Custom Report', 'Input number of days (30, 60, 90, 120, 360):', ui.ButtonSet.OK_CANCEL);
  if (daysResp.getSelectedButton() !== ui.Button.OK) return;
  const days = parseInt(daysResp.getResponseText(), 10);
  if (![30, 60, 90, 120, 360].includes(days)) {
    ui.alert('Invalid value. Please enter one of: 30, 60, 90, 120, or 360');
    return;
  }
  generateProjectReport('REGULAR', days);
}

/**
 * Dialog for entering date range for Regular
 */
function showRegularDateRangeDialog() {
  const ui = SpreadsheetApp.getUi();
  
  // Get start date
  const startResp = ui.prompt(
    'Regular Date Range Report - Start Date',
    'Enter start date (YYYY-MM-DD format):\n\nExample: 2025-01-01',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (startResp.getSelectedButton() !== ui.Button.OK) return;
  
  const startDate = startResp.getResponseText().trim();
  if (!isValidDate(startDate)) {
    ui.alert('Error', 'Invalid start date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-01', ui.ButtonSet.OK);
    return;
  }
  
  // Get end date
  const endResp = ui.prompt(
    'Regular Date Range Report - End Date',
    'Enter end date (YYYY-MM-DD format):\n\nExample: 2025-01-31',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (endResp.getSelectedButton() !== ui.Button.OK) return;
  
  const endDate = endResp.getResponseText().trim();
  if (!isValidDate(endDate)) {
    ui.alert('Error', 'Invalid end date format. Please use YYYY-MM-DD format.\n\nExample: 2025-01-31', ui.ButtonSet.OK);
    return;
  }
  
  // Validate date range
  if (startDate > endDate) {
    ui.alert('Error', 'Start date must be before end date.', ui.ButtonSet.OK);
    return;
  }
  
  // Generate report
  generateProjectReportForDateRange('REGULAR', startDate, endDate);
}

/**
 * Update Regular data to current
 */
function updateRegularDataToCurrent() {
  updateProjectDataToCurrent('REGULAR');
}

/**
 * Clear Regular data
 */
function clearRegularAllData() {
  clearProjectAllData('REGULAR');
}

// Regular Auto Cache functions
function startRegularAutoCache() { startProjectAutoCache('REGULAR'); }
function stopRegularAutoCache() { stopProjectAutoCache('REGULAR'); }
function checkRegularAutoCacheStatus() { checkProjectAutoCacheStatus('REGULAR'); }
function forceRegularCache() { forceProjectCache('REGULAR'); }
function clearRegularAutoCacheTriggers() { clearProjectAutoCacheTriggers('REGULAR'); }

// Regular Group test functions
function testRegularCollapseGroups() { testProjectCollapseGroups('REGULAR'); }
function testRegularExpandGroups() { testProjectExpandGroups('REGULAR'); }

// Regular Debug functions
function debugRegularReportGeneration() { debugProjectReportGeneration('REGULAR'); }
function quickRegularAPICheck() { quickProjectAPICheck('REGULAR'); }

// =============================================================================
// UNIVERSAL PROJECT FUNCTIONS
// =============================================================================

/**
 * Generate report for specific project and days
 */
function generateProjectReport(projectName, days) {
  setCurrentProject(projectName);
  generateReport(days);
}

/**
 * Generate report for specific project and date range
 */
function generateProjectReportForDateRange(projectName, startDate, endDate) {
  setCurrentProject(projectName);
  generateReportForDateRange(startDate, endDate);
}

/**
 * Update project data to current
 */
function updateProjectDataToCurrent(projectName) {
  setCurrentProject(projectName);
  updateAllDataToCurrent();
}

/**
 * Clear project data
 */
function clearProjectAllData(projectName) {
  const ui = SpreadsheetApp.getUi();
  
  // Show confirmation dialog
  const result = ui.alert(
    `Clear ${projectName} Data`,
    `This will delete all data in the ${projectName} sheet.\n\n` +
    'Comments will be preserved and can be restored later.\n\n' +
    'Are you sure you want to continue?',
    ui.ButtonSet.YES_NO
  );
  
  if (result !== ui.Button.YES) {
    return;
  }
  
  try {
    setCurrentProject(projectName);
    const config = getCurrentConfig();
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    }
    
    clearAllDataSilent();
    
    ui.alert('Success', `All ${projectName} data has been cleared. Comments have been preserved in cache.`, ui.ButtonSet.OK);
  } catch (error) {
    console.error('Error during sheet recreation:', error);
    ui.alert('Error', `Error clearing ${projectName} data: ` + error.toString(), ui.ButtonSet.OK);
  }
}

/**
 * Universal auto cache functions
 */
function startProjectAutoCache(projectName) {
  // TODO: Implement project-specific auto cache
  const ui = SpreadsheetApp.getUi();
  ui.alert('Coming Soon', `${projectName} auto cache needs to be implemented.`, ui.ButtonSet.OK);
}

function stopProjectAutoCache(projectName) {
  // TODO: Implement project-specific auto cache
  const ui = SpreadsheetApp.getUi();
  ui.alert('Coming Soon', `${projectName} auto cache needs to be implemented.`, ui.ButtonSet.OK);
}

function checkProjectAutoCacheStatus(projectName) {
  // TODO: Implement project-specific auto cache
  const ui = SpreadsheetApp.getUi();
  ui.alert('Coming Soon', `${projectName} auto cache needs to be implemented.`, ui.ButtonSet.OK);
}

function forceProjectCache(projectName) {
  // TODO: Implement project-specific auto cache
  const ui = SpreadsheetApp.getUi();
  ui.alert('Coming Soon', `${projectName} cache needs to be implemented.`, ui.ButtonSet.OK);
}

function clearProjectAutoCacheTriggers(projectName) {
  // TODO: Implement project-specific auto cache
  const ui = SpreadsheetApp.getUi();
  ui.alert('Coming Soon', `${projectName} trigger management needs to be implemented.`, ui.ButtonSet.OK);
}

/**
 * Universal group test functions
 */
function testProjectCollapseGroups(projectName) {
  setCurrentProject(projectName);
  testCollapseGroups();
}

function testProjectExpandGroups(projectName) {
  setCurrentProject(projectName);
  testExpandGroups();
}

/**
 * Universal debug functions
 */
function debugProjectReportGeneration(projectName) {
  setCurrentProject(projectName);
  debugReportGeneration();
}

function quickProjectAPICheck(projectName) {
  setCurrentProject(projectName);
  quickAPICheck();
}

/**
 * Show project settings dialog
 */
function showProjectSettings() {
  const ui = SpreadsheetApp.getUi();
  
  const trickyConfig = PROJECTS.TRICKY;
  const molocoConfig = PROJECTS.MOLOCO;
  const regularConfig = PROJECTS.REGULAR;
  
  const message = 
    '📊 TRICKY PROJECT:\n' +
    `• Sheet: ${trickyConfig.SHEET_NAME}\n` +
    `• API URL: ${trickyConfig.API_URL}\n` +
    `• Target eROAS: ${trickyConfig.TARGET_EROAS}%\n` +
    `• Token: ${trickyConfig.BEARER_TOKEN ? 'Configured ✓' : 'Missing ✗'}\n` +
    `• Campaign Search: ${trickyConfig.API_CONFIG.FILTERS.ATTRIBUTION_CAMPAIGN_SEARCH}\n` +
    `• Network HID: ${trickyConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]}\n\n` +
    
    '🔥 MOLOCO PROJECT:\n' +
    `• Sheet: ${molocoConfig.SHEET_NAME}\n` +
    `• API URL: ${molocoConfig.API_URL}\n` +
    `• Target eROAS: ${molocoConfig.TARGET_EROAS}%\n` +
    `• Token: ${molocoConfig.BEARER_TOKEN ? 'Configured ✓' : 'Missing ✗'}\n` +
    `• Campaign Search: NO FILTER (takes all campaigns)\n` +
    `• Network HID: ${molocoConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]}\n\n` +
    
    '📈 REGULAR PROJECT:\n' +
    `• Sheet: ${regularConfig.SHEET_NAME}\n` +
    `• API URL: ${regularConfig.API_URL}\n` +
    `• Target eROAS: ${regularConfig.TARGET_EROAS}%\n` +
    `• Token: ${regularConfig.BEARER_TOKEN ? 'Configured ✓' : 'Missing ✗'}\n` +
    `• Campaign Search: NO FILTER (takes all campaigns)\n` +
    `• Network HID: ${regularConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]}\n\n` +
    
    '✅ All projects are fully configured and ready to use!\n\n' +
    '🔄 Key differences:\n' +
    `• Tricky: Network ${trickyConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]}, filtered campaigns "/tricky/i"\n` +
    `• Moloco: Network ${molocoConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]}, ALL campaigns (no filter)\n` +
    `• Regular: Network ${regularConfig.API_CONFIG.FILTERS.ATTRIBUTION_NETWORK_HID[0]} (same as Tricky), ALL campaigns (no filter)\n` +
    '• Each project has separate comment cache\n' +
    '• Independent data sheets and settings\n' +
    '• All projects use the same bearer token\n\n' +
    '🎯 Source App Display:\n' +
    '• Tricky: Extracts app names from campaign structure\n' +
    '• Moloco: Shows full campaign names (APD_Word_Maker_iOS_...)\n' +
    '• Regular: Shows extracted app names (same logic as Tricky)';
  
  ui.alert('Project Settings', message, ui.ButtonSet.OK);
}

// =============================================================================
// LEGACY FUNCTIONS (for backward compatibility)
// =============================================================================

// Keep old function names working, but redirect to Tricky
function generateReport30() { generateTrickyReport30(); }
function generateReport60() { generateTrickyReport60(); }
function generateReport90() { generateTrickyReport90(); }
function saveCommentsToCache() { saveTrickyCommentsToCache(); }
function showDaysDialog() { showTrickyDaysDialog(); }
function showDateRangeDialog() { showTrickyDateRangeDialog(); }
function clearAllData() { clearTrickyAllData(); }
