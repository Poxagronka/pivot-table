/**
 * Menu Functions - Complete UX with Comprehensive Threshold Management
 * Fixed for Google Apps Script compatibility
 */

var MENU_PROJECTS = ['Tricky', 'Moloco', 'Regular'];
var MENU_DAYS = [30, 60, 90];

function onOpen() {
  var ui = SpreadsheetApp.getUi();
  var menu = ui.createMenu('📊 Campaign Report');
  var props = PropertiesService.getScriptProperties();
  
  // Most used actions at top
  menu.addItem('📈 Generate Report...', 'smartReportWizard')
      .addItem('💾 Save All Comments', 'saveAllCommentsToCache')
      .addSeparator()
      // Smart toggles with current state
      .addItem(props.getProperty('AUTO_CACHE_ENABLED') === 'true' ? 
               '✅ Auto-Cache ON → Turn OFF' : 
               '❌ Auto-Cache OFF → Turn ON', 'toggleAutoCache')
      .addItem(props.getProperty('AUTO_UPDATE_ENABLED') === 'true' ? 
               '✅ Auto-Update ON → Turn OFF' : 
               '❌ Auto-Update OFF → Turn ON', 'toggleAutoUpdate')
      .addSeparator()
      .addItem('⚙️ Settings & Tools...', 'smartSettingsHub')
      .addToUi();
}

// Smart Report Wizard - guides user through options
function smartReportWizard() {
  var ui = SpreadsheetApp.getUi();
  
  // Step 1: Choose scope
  var scope = showChoice('📈 Generate Report - Step 1/3', [
    'All Projects Together',
    'Single Project',
    'Custom Selection'
  ]);
  
  if (!scope) return;
  
  // Step 2: Choose time period
  var period = showChoice('📅 Select Period - Step 2/3', [
    'Last 30 days',
    'Last 60 days', 
    'Last 90 days',
    'Custom days (120, 360, etc)',
    'Date range (from/to)'
  ]);
  
  if (!period) return;
  
  // Step 3: Execute based on selections
  if (scope === 1) { // All Projects
    var days = period <= 3 ? MENU_DAYS[period-1] : 
                 period === 4 ? promptNumber('Enter days:', [120, 360]) : null;
    
    if (period === 5) { // Date range
      var dates = promptDateRange();
      if (dates) runAllProjectsDateRange(dates.start, dates.end);
    } else if (days) {
      quickGenerateAllForDays(days);
    }
    
  } else if (scope === 2) { // Single Project
    var project = showChoice('Select Project - Step 3/3', MENU_PROJECTS);
    if (!project) return;
    
    var projectName = MENU_PROJECTS[project-1].toUpperCase();
    
    if (period <= 3) {
      generateProjectReport(projectName, MENU_DAYS[period-1]);
    } else if (period === 4) {
      var days = promptNumber('Enter days:', [120, 360]);
      if (days) generateProjectReport(projectName, days);
    } else {
      var dates = promptDateRange();
      if (dates) generateProjectReportForDateRange(projectName, dates.start, dates.end);
    }
    
  } else { // Custom Selection
    var selected = showMultiChoice('Select Projects:', MENU_PROJECTS);
    if (!selected || selected.length === 0) return;
    
    var days = period <= 3 ? MENU_DAYS[period-1] : 
                 period === 4 ? promptNumber('Enter days:', [120, 360]) : null;
    
    if (days) {
      runSelectedProjects(selected, days);
    } else if (period === 5) {
      var dates = promptDateRange();
      if (dates) runSelectedProjectsDateRange(selected, dates.start, dates.end);
    }
  }
}

// Smart Settings Hub
function smartSettingsHub() {
  var ui = SpreadsheetApp.getUi();
  
  var action = showChoice('⚙️ Settings & Tools', [
    '🎯 Target eROAS Settings',
    '📊 Growth Status Thresholds',
    '📋 View Project Overview',
    '💬 Comments Management',
    '🗑️ Clear Data',
    '🔍 API Health Check',
    '🐛 Debug Tools',
    '📊 View System Status'
  ]);
  
  if (!action) return;
  
  switch(action) {
    case 1: targetSettingsWizard(); break;
    case 2: growthThresholdsWizard(); break;
    case 3: projectOverviewWizard(); break;
    case 4: commentsWizard(); break;
    case 5: clearDataWizard(); break;
    case 6: apiCheckWizard(); break;
    case 7: debugWizard(); break;
    case 8: showAutomationStatus(); break;
  }
}

// Target Settings Wizard
function targetSettingsWizard() {
  var choice = showChoice('🎯 Target eROAS Settings', [
    'View Current Settings',
    'Update Single Project',
    'Update All Projects',
    'Reset to Defaults'
  ]);
  
  if (!choice) return;
  
  var ui = SpreadsheetApp.getUi();
  
  if (choice === 1) {
    var message = 'Current Target eROAS:\n';
    for (var i = 0; i < MENU_PROJECTS.length; i++) {
      var p = MENU_PROJECTS[i];
      message += p + ': ' + getTargetEROAS(p.toUpperCase()) + '%\n';
    }
    ui.alert('Current Target eROAS', message, ui.ButtonSet.OK);
      
  } else if (choice === 2) {
    var project = showChoice('Select Project:', MENU_PROJECTS);
    if (project) {
      var p = MENU_PROJECTS[project-1];
      var current = getTargetEROAS(p.toUpperCase());
      var value = promptNumber(p + ' Target eROAS (current: ' + current + '%):' , [140, 160, 180]);
      if (value && value >= 100 && value <= 500) {
        setTargetEROAS(p.toUpperCase(), value);
        ui.alert('✅ Updated', p + ' target set to ' + value + '%', ui.ButtonSet.OK);
      }
    }
    
  } else if (choice === 3) {
    var values = {};
    for (var i = 0; i < MENU_PROJECTS.length; i++) {
      var p = MENU_PROJECTS[i];
      var current = getTargetEROAS(p.toUpperCase());
      var value = promptNumber(p + ' (current: ' + current + '%):' , [current]);
      if (value && value >= 100 && value <= 500) values[p] = value;
    }
    var keys = Object.keys(values);
    if (keys.length > 0) {
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        setTargetEROAS(key.toUpperCase(), values[key]);
      }
      ui.alert('✅ Updated', 'All targets have been saved', ui.ButtonSet.OK);
    }
    
  } else if (choice === 4) {
    if (ui.alert('Reset to Defaults?', 
                 'Tricky: 160%\nMoloco: 140%\nRegular: 140%', 
                 ui.ButtonSet.YES_NO) === ui.Button.YES) {
      setTargetEROAS('TRICKY', 160);
      setTargetEROAS('MOLOCO', 140);
      setTargetEROAS('REGULAR', 140);
      ui.alert('✅ Reset', 'All targets reset to defaults', ui.ButtonSet.OK);
    }
  }
}

// Project Overview Wizard
function projectOverviewWizard() {
  var choice = showChoice('📋 Project Overview', [
    'View All Projects Summary',
    'View Single Project Details',
    'Compare Growth Thresholds',
    'Export Settings'
  ]);
  
  if (!choice) return;
  
  var ui = SpreadsheetApp.getUi();
  
  if (choice === 1) {
    showAllProjectsOverview();
  } else if (choice === 2) {
    var project = showChoice('Select Project:', MENU_PROJECTS);
    if (project) {
      var projectName = MENU_PROJECTS[project-1].toUpperCase();
      var overview = getProjectStatusOverview(projectName);
      ui.alert(MENU_PROJECTS[project-1] + ' Overview', overview, ui.ButtonSet.OK);
    }
  } else if (choice === 3) {
    showThresholdsComparison();
  } else if (choice === 4) {
    exportAllSettings();
  }
}

// Growth Thresholds Wizard with Enhanced UX
function growthThresholdsWizard() {
  var choice = showChoice('📊 Growth Status Thresholds', [
    'Quick View Current Settings',
    'Update Single Project',
    'Update All Projects (Same Values)',
    'Advanced Settings Editor',
    'Reset to Defaults',
    'View Growth Criteria Guide',
    'Test Threshold Scenarios'
  ]);
  
  if (!choice) return;
  
  switch(choice) {
    case 1: viewCurrentThresholds(); break;
    case 2: updateSingleProjectThresholds(); break;
    case 3: updateAllProjectsThresholds(); break;
    case 4: advancedThresholdEditor(); break;
    case 5: resetAllThresholdsToDefaults(); break;
    case 6: showGrowthCriteriaGuide(); break;
    case 7: testThresholdScenarios(); break;
  }
}

// Enhanced threshold editing functions
function updateSingleProjectThresholds() {
  var ui = SpreadsheetApp.getUi();
  var project = showChoice('Select Project:', MENU_PROJECTS);
  if (!project) return;
  
  var projectName = MENU_PROJECTS[project-1].toUpperCase();
  var current = getGrowthThresholds(projectName);
  
  // Show current settings with clear explanations
  var currentInfo = getProjectStatusOverview(projectName);
  ui.alert('Current Settings', currentInfo, ui.ButtonSet.OK);
  
  // Choose threshold category to edit
  var category = showChoice('Edit ' + MENU_PROJECTS[project-1] + ' Thresholds', [
    '🟢 Healthy Growth Settings',
    '🔴 Inefficient Growth Settings', 
    '🔵 Scaling Down Settings',
    '🟡 Moderate Growth Settings',
    '🟠 Declining Efficiency Settings',
    'Cancel'
  ]);
  
  if (!category || category === 6) return;
  
  var newThresholds = JSON.parse(JSON.stringify(current)); // Deep copy
  
  switch(category) {
    case 1: // Healthy Growth
      editHealthyGrowthThresholds(projectName, newThresholds);
      break;
    case 2: // Inefficient Growth
      editInefficientGrowthThresholds(projectName, newThresholds);
      break;
    case 3: // Scaling Down
      editScalingDownThresholds(projectName, newThresholds);
      break;
    case 4: // Moderate Growth
      editModerateGrowthThresholds(projectName, newThresholds);
      break;
    case 5: // Declining Efficiency
      editDecliningEfficiencyThresholds(projectName, newThresholds);
      break;
  }
  
  setGrowthThresholds(projectName, newThresholds);
  ui.alert('✅ Updated', MENU_PROJECTS[project-1] + ' thresholds have been updated!', ui.ButtonSet.OK);
}

function editHealthyGrowthThresholds(projectName, thresholds) {
  var ui = SpreadsheetApp.getUi();
  var current = thresholds.healthyGrowth;
  
  ui.alert('🟢 Healthy Growth Settings', 
    getThresholdExplanation('healthyGrowth', projectName), 
    ui.ButtonSet.OK);
  
  var spendInput = ui.prompt('Healthy Growth - Spend Threshold',
    'Current: ' + current.minSpendChange + '%\n\nEnter minimum spend increase % for healthy growth:',
    ui.ButtonSet.OK_CANCEL);
  
  if (spendInput.getSelectedButton() === ui.Button.OK) {
    var spendValue = parseInt(spendInput.getResponseText());
    if (!isNaN(spendValue) && spendValue >= 0 && spendValue <= 100) {
      thresholds.healthyGrowth.minSpendChange = spendValue;
      thresholds.inefficientGrowth.minSpendChange = spendValue; // Keep in sync
    }
  }
  
  var profitInput = ui.prompt('Healthy Growth - Profit Threshold',
    'Current: ' + current.minProfitChange + '%\n\nEnter minimum profit increase % for healthy growth:',
    ui.ButtonSet.OK_CANCEL);
  
  if (profitInput.getSelectedButton() === ui.Button.OK) {
    var profitValue = parseInt(profitInput.getResponseText());
    if (!isNaN(profitValue) && profitValue >= -50 && profitValue <= 100) {
      thresholds.healthyGrowth.minProfitChange = profitValue;
    }
  }
}

function editInefficientGrowthThresholds(projectName, thresholds) {
  var ui = SpreadsheetApp.getUi();
  var current = thresholds.inefficientGrowth;
  
  ui.alert('🔴 Inefficient Growth Settings', 
    getThresholdExplanation('inefficientGrowth', projectName), 
    ui.ButtonSet.OK);
  
  var profitInput = ui.prompt('Inefficient Growth - Profit Threshold',
    'Current: ' + current.maxProfitChange + '%\n\nEnter maximum profit decline % before marking as inefficient:\n(Use negative numbers, e.g., -10 for 10% decline)',
    ui.ButtonSet.OK_CANCEL);
  
  if (profitInput.getSelectedButton() === ui.Button.OK) {
    var profitValue = parseInt(profitInput.getResponseText());
    if (!isNaN(profitValue) && profitValue <= 0 && profitValue >= -100) {
      thresholds.inefficientGrowth.maxProfitChange = profitValue;
    }
  }
}

function editScalingDownThresholds(projectName, thresholds) {
  var ui = SpreadsheetApp.getUi();
  var current = thresholds.scalingDown;
  
  ui.alert('🔵 Scaling Down Settings', 
    getThresholdExplanation('scalingDown', projectName), 
    ui.ButtonSet.OK);
  
  var spendInput = ui.prompt('Scaling Down - Spend Threshold',
    'Current: ' + current.maxSpendChange + '%\n\nEnter maximum spend decline % before marking as scaling down:\n(Use negative numbers, e.g., -20 for 20% decline)',
    ui.ButtonSet.OK_CANCEL);
  
  if (spendInput.getSelectedButton() === ui.Button.OK) {
    var spendValue = parseInt(spendInput.getResponseText());
    if (!isNaN(spendValue) && spendValue <= 0 && spendValue >= -100) {
      thresholds.scalingDown.maxSpendChange = spendValue;
    }
  }
}

function editModerateGrowthThresholds(projectName, thresholds) {
  var ui = SpreadsheetApp.getUi();
  
  ui.alert('🟡 Moderate Growth Settings', 
    'These thresholds determine the minimum changes needed for moderate growth status.\nLower than healthy growth but still positive.', 
    ui.ButtonSet.OK);
  
  var spendInput = ui.prompt('Moderate Growth - Spend Threshold',
    'Current: ' + thresholds.moderateGrowthSpend + '%\n\nEnter minimum spend increase % for moderate growth:',
    ui.ButtonSet.OK_CANCEL);
  
  if (spendInput.getSelectedButton() === ui.Button.OK) {
    var spendValue = parseInt(spendInput.getResponseText());
    if (!isNaN(spendValue) && spendValue >= 0 && spendValue <= 50) {
      thresholds.moderateGrowthSpend = spendValue;
    }
  }
  
  var profitInput = ui.prompt('Moderate Growth - Profit Threshold',
    'Current: ' + thresholds.moderateGrowthProfit + '%\n\nEnter minimum profit increase % for moderate growth:',
    ui.ButtonSet.OK_CANCEL);
  
  if (profitInput.getSelectedButton() === ui.Button.OK) {
    var profitValue = parseInt(profitInput.getResponseText());
    if (!isNaN(profitValue) && profitValue >= 0 && profitValue <= 50) {
      thresholds.moderateGrowthProfit = profitValue;
    }
  }
}

function editDecliningEfficiencyThresholds(projectName, thresholds) {
  var ui = SpreadsheetApp.getUi();
  var current = thresholds.decliningEfficiency;
  
  ui.alert('🟠 Declining Efficiency Settings', 
    'These detect when profit drops while spend remains stable or grows.\nKey indicator of performance deterioration.', 
    ui.ButtonSet.OK);
  
  var profitInput = ui.prompt('Declining Efficiency - Profit Threshold',
    'Current: ' + current.maxProfitDecline + '%\n\nEnter profit decline % that triggers efficiency warning:\n(Use negative numbers, e.g., -8 for 8% decline)',
    ui.ButtonSet.OK_CANCEL);
  
  if (profitInput.getSelectedButton() === ui.Button.OK) {
    var profitValue = parseInt(profitInput.getResponseText());
    if (!isNaN(profitValue) && profitValue <= 0 && profitValue >= -50) {
      thresholds.decliningEfficiency.maxProfitDecline = profitValue;
    }
  }
}

// Utility functions
function viewCurrentThresholds() {
  var ui = SpreadsheetApp.getUi();
  var message = '📊 CURRENT GROWTH THRESHOLDS\n\n';
  
  for (var i = 0; i < MENU_PROJECTS.length; i++) {
    var project = MENU_PROJECTS[i];
    var projectName = project.toUpperCase();
    var thresholds = getGrowthThresholds(projectName);
    
    message += project + ':\n';
    message += '🟢 Healthy: Spend >' + thresholds.healthyGrowth.minSpendChange + '%, Profit >' + thresholds.healthyGrowth.minProfitChange + '%\n';
    message += '🔴 Inefficient: Profit <' + thresholds.inefficientGrowth.maxProfitChange + '%\n';
    message += '🔵 Scaling: Spend <' + thresholds.scalingDown.maxSpendChange + '%\n';
    message += '🟡 Moderate: Spend >' + thresholds.moderateGrowthSpend + '%, Profit >' + thresholds.moderateGrowthProfit + '%\n\n';
  }
  
  ui.alert('Growth Thresholds', message, ui.ButtonSet.OK);
}

function updateAllProjectsThresholds() {
  var ui = SpreadsheetApp.getUi();
  
  if (ui.alert('Update All Projects', 
               'This will allow you to set the same thresholds for all projects.\n\nContinue?', 
               ui.ButtonSet.YES_NO) !== ui.Button.YES) {
    return;
  }
  
  // Get common values
  var healthySpend = promptNumber('Healthy Growth - Min Spend Change %:', [10, 15, 20]);
  if (healthySpend === null) return;
  
  var healthyProfit = promptNumber('Healthy Growth - Min Profit Change %:', [5, 8, 10]);
  if (healthyProfit === null) return;
  
  var inefficientSpend = promptNumber('Inefficient Growth - Min Spend Change %:', [10, 15, 20]);
  if (inefficientSpend === null) return;
  
  var inefficientProfit = promptNumber('Inefficient Growth - Max Profit Change %:', [-5, -8, -10]);
  if (inefficientProfit === null) return;
  
  var scalingDown = promptNumber('Scaling Down - Max Spend Change %:', [-10, -15, -20]);
  if (scalingDown === null) return;
  
  var moderateSpend = promptNumber('Moderate Growth - Min Spend Change %:', [0, 2, 5]);
  if (moderateSpend === null) return;
  
  var moderateProfit = promptNumber('Moderate Growth - Min Profit Change %:', [0, 2, 3]);
  if (moderateProfit === null) return;
  
  // Apply to all projects
  var newThresholds = {
    healthyGrowth: { minSpendChange: healthySpend, minProfitChange: healthyProfit },
    inefficientGrowth: { minSpendChange: inefficientSpend, maxProfitChange: inefficientProfit },
    scalingDown: { maxSpendChange: scalingDown },
    moderateGrowthSpend: moderateSpend,
    moderateGrowthProfit: moderateProfit,
    decliningEfficiency: { minSpendStable: -2, maxProfitDecline: -10 },
    minimalGrowth: { maxSpendChange: 5, maxProfitChange: 3 },
    proportionalDeclineRatio: 1.5
  };
  
  for (var i = 0; i < MENU_PROJECTS.length; i++) {
    setGrowthThresholds(MENU_PROJECTS[i].toUpperCase(), newThresholds);
  }
  
  ui.alert('✅ Updated', 'All projects have been updated with the new thresholds!', ui.ButtonSet.OK);
}

function resetAllThresholdsToDefaults() {
  var ui = SpreadsheetApp.getUi();
  
  if (ui.alert('Reset to Defaults?', 
               'This will reset all growth thresholds to their default values.\n\nContinue?', 
               ui.ButtonSet.YES_NO) !== ui.Button.YES) {
    return;
  }
  
  for (var i = 0; i < MENU_PROJECTS.length; i++) {
    resetGrowthThresholds(MENU_PROJECTS[i].toUpperCase());
  }
  
  ui.alert('✅ Reset', 'All growth thresholds have been reset to defaults!', ui.ButtonSet.OK);
}

function showAllProjectsOverview() {
  var ui = SpreadsheetApp.getUi();
  var message = '📋 ALL PROJECTS OVERVIEW\n\n';
  
  for (var i = 0; i < MENU_PROJECTS.length; i++) {
    var project = MENU_PROJECTS[i];
    var projectName = project.toUpperCase();
    var targetROAS = getTargetEROAS(projectName);
    var thresholds = getGrowthThresholds(projectName);
    
    message += project + ': eROAS ' + targetROAS + '%, Healthy ' + thresholds.healthyGrowth.minSpendChange + '%/' + thresholds.healthyGrowth.minProfitChange + '%\n';
  }
  
  message += '\nClick "View Single Project Details" for full settings.';
  ui.alert('Projects Overview', message, ui.ButtonSet.OK);
}

function showThresholdsComparison() {
  var ui = SpreadsheetApp.getUi();
  var message = '📊 THRESHOLDS COMPARISON\n\n';
  
  var categories = ['healthyGrowth', 'inefficientGrowth', 'scalingDown'];
  
  for (var c = 0; c < categories.length; c++) {
    var category = categories[c];
    var displayName = category.replace(/([A-Z])/g, ' $1').toLowerCase();
    message += displayName.toUpperCase() + ':\n';
    
    for (var i = 0; i < MENU_PROJECTS.length; i++) {
      var project = MENU_PROJECTS[i];
      var thresholds = getGrowthThresholds(project.toUpperCase())[category];
      if (typeof thresholds === 'object') {
        var values = Object.keys(thresholds).map(function(key) { return thresholds[key]; }).join('%/');
        message += project + ': ' + values + '%\n';
      } else {
        message += project + ': ' + thresholds + '%\n';
      }
    }
    message += '\n';
  }
  
  ui.alert('Thresholds Comparison', message, ui.ButtonSet.OK);
}

function testThresholdScenarios() {
  var ui = SpreadsheetApp.getUi();
  var project = showChoice('Select Project for Testing:', MENU_PROJECTS);
  if (!project) return;
  
  var projectName = MENU_PROJECTS[project-1].toUpperCase();
  
  // Test some common scenarios
  var scenarios = [
    { spend: 15, profit: 10, desc: "Strong growth" },
    { spend: 0, profit: -12, desc: "Stable spend, profit drop" },
    { spend: -8, profit: -5, desc: "Both declining moderately" },
    { spend: -25, profit: -20, desc: "Major scaling down" }
  ];
  
  var message = '📊 THRESHOLD TEST - ' + MENU_PROJECTS[project-1] + '\n\n';
  
  for (var i = 0; i < scenarios.length; i++) {
    var scenario = scenarios[i];
    var analysis = analyzeGrowthScenario(scenario.spend, scenario.profit, projectName);
    message += scenario.desc + ':\nSpend ' + scenario.spend + '%, Profit ' + scenario.profit + '%\n→ ' + analysis.status + '\n\n';
  }
  
  ui.alert('Threshold Testing', message, ui.ButtonSet.OK);
}

function showGrowthCriteriaGuide() {
  var ui = SpreadsheetApp.getUi();
  var project = showChoice('Select Project for Guide:', MENU_PROJECTS);
  if (!project) return;
  
  var projectName = MENU_PROJECTS[project-1].toUpperCase();
  var explanation = getProjectGrowthStatusExplanation(projectName);
  
  ui.alert('Growth Criteria Guide - ' + MENU_PROJECTS[project-1], explanation, ui.ButtonSet.OK);
}

// Placeholder functions for advanced features
function advancedThresholdEditor() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('Advanced Editor', 'Advanced threshold editor coming soon!\n\nUse "Update Single Project" for detailed threshold editing.', ui.ButtonSet.OK);
}

function exportAllSettings() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('Export Settings', 'Settings export feature coming soon!', ui.ButtonSet.OK);
}

// Comments Wizard
function commentsWizard() {
  var choice = showChoice('💬 Comments Management', [
    'Save All Comments Now',
    'Save Single Project',
    'View Auto-Cache Status',
    'Configure Auto-Cache'
  ]);
  
  if (!choice) return;
  
  switch(choice) {
    case 1: 
      saveAllCommentsToCache(); 
      break;
    case 2: 
      var p = showChoice('Select Project:', MENU_PROJECTS);
      if (p) {
        var projectName = MENU_PROJECTS[p-1].toUpperCase();
        setCurrentProject(projectName);
        saveProjectCommentsManual(projectName);
        SpreadsheetApp.getUi().alert('✅ Success', MENU_PROJECTS[p-1] + ' comments saved', SpreadsheetApp.getUi().ButtonSet.OK);
      }
      break;
    case 3: 
      showAutomationStatus(); 
      break;
    case 4: 
      showAutoCacheSettings(); 
      break;
  }
}

// Clear Data Wizard
function clearDataWizard() {
  var choice = showChoice('🗑️ Clear Data', [
    'Clear All Projects',
    'Clear Single Project', 
    'View What Will Be Cleared'
  ]);
  
  if (!choice) return;
  
  if (choice === 1) {
    clearAllProjectsData();
  } else if (choice === 2) {
    var p = showChoice('Select Project:', MENU_PROJECTS);
    if (p) clearProjectAllData(MENU_PROJECTS[p-1].toUpperCase());
  } else {
    SpreadsheetApp.getUi().alert('Info', 
      'Clear Data will:\n\n' +
      '✓ Remove all report data\n' +
      '✓ Preserve saved comments\n' +
      '✓ Keep your settings\n\n' +
      'Comments can be restored after clearing.',
      SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

// API Check Wizard
function apiCheckWizard() {
  var choice = showChoice('🔍 API Health Check', [
    'Quick Check All Projects',
    'Check Single Project',
    'Test with Custom Date Range'
  ]);
  
  if (!choice) return;
  
  if (choice === 1) {
    checkAllProjectsAPI();
  } else if (choice === 2) {
    var p = showChoice('Select Project:', MENU_PROJECTS);
    if (p) checkProjectAPI(MENU_PROJECTS[p-1].toUpperCase());
  } else {
    var dates = promptDateRange();
    if (dates) testAPIWithDateRange(dates.start, dates.end);
  }
}

// Debug Wizard
function debugWizard() {
  var p = showChoice('🐛 Debug Tools', MENU_PROJECTS);
  if (p) debugProjectReportGeneration(MENU_PROJECTS[p-1].toUpperCase());
}

// Helper UI Functions
function showChoice(title, options) {
  var ui = SpreadsheetApp.getUi();
  var numbered = '';
  for (var i = 0; i < options.length; i++) {
    numbered += (i + 1) + ' - ' + options[i] + '\n';
  }
  var result = ui.prompt(title, numbered + '\nEnter number:', ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  var choice = parseInt(result.getResponseText());
  return (choice >= 1 && choice <= options.length) ? choice : null;
}

function showMultiChoice(title, options) {
  var ui = SpreadsheetApp.getUi();
  var numbered = '';
  for (var i = 0; i < options.length; i++) {
    numbered += (i + 1) + ' - ' + options[i] + '\n';
  }
  var result = ui.prompt(title, 
    numbered + '\nEnter numbers separated by commas (e.g., 1,3):', 
    ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  var selections = result.getResponseText().split(',');
  var validSelections = [];
  
  for (var i = 0; i < selections.length; i++) {
    var n = parseInt(selections[i].trim());
    if (n >= 1 && n <= options.length) {
      validSelections.push(options[n-1]);
    }
  }
  
  return validSelections;
}

function promptNumber(prompt, suggestions) {
  suggestions = suggestions || [];
  var ui = SpreadsheetApp.getUi();
  var hint = suggestions.length > 0 ? ' (e.g., ' + suggestions.join(', ') + ')' : '';
  var result = ui.prompt('Input Required', prompt + hint, ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  var num = parseInt(result.getResponseText());
  return isNaN(num) ? null : num;
}

function promptDateRange() {
  var ui = SpreadsheetApp.getUi();
  
  var start = ui.prompt('Start Date', 
    'Enter date (YYYY-MM-DD):\n\nExample: 2024-01-01', 
    ui.ButtonSet.OK_CANCEL);
  if (start.getSelectedButton() !== ui.Button.OK) return null;
  
  var end = ui.prompt('End Date', 
    'Enter date (YYYY-MM-DD):\n\nExample: 2024-12-31', 
    ui.ButtonSet.OK_CANCEL);
  if (end.getSelectedButton() !== ui.Button.OK) return null;
  
  if (!isValidDate(start.getResponseText()) || !isValidDate(end.getResponseText())) {
    ui.alert('❌ Invalid date format');
    return null;
  }
  
  return { start: start.getResponseText(), end: end.getResponseText() };
}

// Quick Actions
function quickGenerateAllForDays(days) {
  var ui = SpreadsheetApp.getUi();
  var progress = new ProgressManager('All Reports - ' + days + ' days').start('Starting...');
  var success = 0;
  
  try {
    for (var i = 0; i < MENU_PROJECTS.length; i++) {
      var p = MENU_PROJECTS[i];
      progress.update(p + '...', (i + 1) + '/' + MENU_PROJECTS.length);
      try { 
        generateProjectReport(p.toUpperCase(), days); 
        success++; 
      } catch(e) { 
        console.error(e); 
      }
    }
    progress.end();
    ui.alert('✅ Complete', 'Generated ' + success + '/' + MENU_PROJECTS.length + ' reports', ui.ButtonSet.OK);
  } catch(e) {
    progress.end(false);
    ui.alert('❌ Error', e.toString(), ui.ButtonSet.OK);
  }
}

// Run functions
function runSelectedProjects(projects, days) {
  for (var i = 0; i < projects.length; i++) {
    generateProjectReport(projects[i].toUpperCase(), days);
  }
  SpreadsheetApp.getUi().alert('✅ Complete', 'Generated ' + projects.length + ' reports', SpreadsheetApp.getUi().ButtonSet.OK);
}

function runAllProjectsDateRange(start, end) {
  for (var i = 0; i < MENU_PROJECTS.length; i++) {
    generateProjectReportForDateRange(MENU_PROJECTS[i].toUpperCase(), start, end);
  }
  SpreadsheetApp.getUi().alert('✅ Complete', 'All reports generated', SpreadsheetApp.getUi().ButtonSet.OK);
}

function runSelectedProjectsDateRange(projects, start, end) {
  for (var i = 0; i < projects.length; i++) {
    generateProjectReportForDateRange(projects[i].toUpperCase(), start, end);
  }
  SpreadsheetApp.getUi().alert('✅ Complete', 'Generated ' + projects.length + ' reports', SpreadsheetApp.getUi().ButtonSet.OK);
}

// Toggle functions
function toggleAutoCache() {
  var props = PropertiesService.getScriptProperties();
  var isOn = props.getProperty('AUTO_CACHE_ENABLED') === 'true';
  isOn ? disableAutoCache() : enableAutoCache();
}

function toggleAutoUpdate() {
  var props = PropertiesService.getScriptProperties();
  var isOn = props.getProperty('AUTO_UPDATE_ENABLED') === 'true';
  isOn ? disableAutoUpdate() : enableAutoUpdate();
}

// Core functions
function generateProjectReport(projectName, days) {
  setCurrentProject(projectName);
  generateReport(days);
}

function generateProjectReportForDateRange(projectName, startDate, endDate) {
  setCurrentProject(projectName);
  generateReportForDateRange(startDate, endDate);
}

function debugProjectReportGeneration(projectName) {
  setCurrentProject(projectName);
  debugReportGeneration();
}

// Helper function to check date validity
function isValidDate(dateString) {
  var regex = /^\d{4}-\d{2}-\d{2}$/;
  if (!regex.test(dateString)) return false;
  
  var date = new Date(dateString);
  return date instanceof Date && !isNaN(date);
}

// Legacy support functions
function generateReport30() { generateProjectReport('TRICKY', 30); }
function generateReport60() { generateProjectReport('TRICKY', 60); }
function generateReport90() { generateProjectReport('TRICKY', 90); }
function saveCommentsToCache() { 
  setCurrentProject('TRICKY');
  saveProjectCommentsManual('TRICKY');
}
function showDaysDialog() { smartReportWizard(); }
function showDateRangeDialog() { smartReportWizard(); }
function clearAllData() { clearProjectAllData('TRICKY'); }
