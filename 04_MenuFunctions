/**
 * Menu Functions - Smart UX Version with Growth Threshold Settings
 */

const MENU_PROJECTS = ['Tricky', 'Moloco', 'Regular'];
const MENU_DAYS = [30, 60, 90];

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('üìä Campaign Report');
  const props = PropertiesService.getScriptProperties();
  
  // Most used actions at top
  menu.addItem('üìà Generate Report...', 'smartReportWizard')
      .addItem('üíæ Save All Comments', 'saveAllCommentsToCache')
      .addSeparator()
      // Smart toggles with current state
      .addItem(props.getProperty('AUTO_CACHE_ENABLED') === 'true' ? 
               '‚úÖ Auto-Cache ON ‚Üí Turn OFF' : 
               '‚ùå Auto-Cache OFF ‚Üí Turn ON', 'toggleAutoCache')
      .addItem(props.getProperty('AUTO_UPDATE_ENABLED') === 'true' ? 
               '‚úÖ Auto-Update ON ‚Üí Turn OFF' : 
               '‚ùå Auto-Update OFF ‚Üí Turn ON', 'toggleAutoUpdate')
      .addSeparator()
      .addItem('‚öôÔ∏è Settings & Tools...', 'smartSettingsHub')
      .addToUi();
}

// Smart Report Wizard - guides user through options
function smartReportWizard() {
  const ui = SpreadsheetApp.getUi();
  
  // Step 1: Choose scope
  const scope = showChoice('üìà Generate Report - Step 1/3', [
    'All Projects Together',
    'Single Project',
    'Custom Selection'
  ]);
  
  if (!scope) return;
  
  // Step 2: Choose time period
  const period = showChoice('üìÖ Select Period - Step 2/3', [
    'Last 30 days',
    'Last 60 days', 
    'Last 90 days',
    'Custom days (120, 360, etc)',
    'Date range (from/to)'
  ]);
  
  if (!period) return;
  
  // Step 3: Execute based on selections
  if (scope === 1) { // All Projects
    const days = period <= 3 ? MENU_DAYS[period-1] : 
                 period === 4 ? promptNumber('Enter days:', [120, 360]) : null;
    
    if (period === 5) { // Date range
      const dates = promptDateRange();
      if (dates) runAllProjectsDateRange(dates.start, dates.end);
    } else if (days) {
      quickGenerateAllForDays(days);
    }
    
  } else if (scope === 2) { // Single Project
    const project = showChoice('Select Project - Step 3/3', MENU_PROJECTS);
    if (!project) return;
    
    const projectName = MENU_PROJECTS[project-1].toUpperCase();
    
    if (period <= 3) {
      generateProjectReport(projectName, MENU_DAYS[period-1]);
    } else if (period === 4) {
      const days = promptNumber('Enter days:', [120, 360]);
      if (days) generateProjectReport(projectName, days);
    } else {
      const dates = promptDateRange();
      if (dates) generateProjectReportForDateRange(projectName, dates.start, dates.end);
    }
    
  } else { // Custom Selection
    const selected = showMultiChoice('Select Projects:', MENU_PROJECTS);
    if (!selected || selected.length === 0) return;
    
    const days = period <= 3 ? MENU_DAYS[period-1] : 
                 period === 4 ? promptNumber('Enter days:', [120, 360]) : null;
    
    if (days) {
      runSelectedProjects(selected, days);
    } else if (period === 5) {
      const dates = promptDateRange();
      if (dates) runSelectedProjectsDateRange(selected, dates.start, dates.end);
    }
  }
}

// Smart Settings Hub
function smartSettingsHub() {
  const ui = SpreadsheetApp.getUi();
  
  const action = showChoice('‚öôÔ∏è Settings & Tools', [
    'üéØ Target eROAS Settings',
    'üìä Growth Status Thresholds',
    'üí¨ Comments Management',
    'üóëÔ∏è Clear Data',
    'üîç API Health Check',
    'üêõ Debug Tools',
    'üìä View System Status'
  ]);
  
  if (!action) return;
  
  switch(action) {
    case 1: targetSettingsWizard(); break;
    case 2: growthThresholdsWizard(); break;
    case 3: commentsWizard(); break;
    case 4: clearDataWizard(); break;
    case 5: apiCheckWizard(); break;
    case 6: debugWizard(); break;
    case 7: showAutomationStatus(); break;
  }
}

// Target Settings Wizard
function targetSettingsWizard() {
  const choice = showChoice('üéØ Target eROAS Settings', [
    'View Current Settings',
    'Update Single Project',
    'Update All Projects',
    'Reset to Defaults'
  ]);
  
  if (!choice) return;
  
  const ui = SpreadsheetApp.getUi();
  
  if (choice === 1) {
    ui.alert('Current Target eROAS', 
      MENU_PROJECTS.map(p => `${p}: ${getTargetEROAS(p.toUpperCase())}%`).join('\n'),
      ui.ButtonSet.OK);
      
  } else if (choice === 2) {
    const project = showChoice('Select Project:', MENU_PROJECTS);
    if (project) {
      const p = MENU_PROJECTS[project-1];
      const current = getTargetEROAS(p.toUpperCase());
      const value = promptNumber(`${p} Target eROAS (current: ${current}%):`, [140, 160, 180]);
      if (value && value >= 100 && value <= 500) {
        setTargetEROAS(p.toUpperCase(), value);
        ui.alert('‚úÖ Updated', `${p} target set to ${value}%`, ui.ButtonSet.OK);
      }
    }
    
  } else if (choice === 3) {
    const values = {};
    for (const p of MENU_PROJECTS) {
      const current = getTargetEROAS(p.toUpperCase());
      const value = promptNumber(`${p} (current: ${current}%):`, [current]);
      if (value && value >= 100 && value <= 500) values[p] = value;
    }
    if (Object.keys(values).length > 0) {
      Object.entries(values).forEach(([p, v]) => setTargetEROAS(p.toUpperCase(), v));
      ui.alert('‚úÖ Updated', 'All targets have been saved', ui.ButtonSet.OK);
    }
    
  } else if (choice === 4) {
    if (ui.alert('Reset to Defaults?', 
                 'Tricky: 160%\nMoloco: 140%\nRegular: 140%', 
                 ui.ButtonSet.YES_NO) === ui.Button.YES) {
      setTargetEROAS('TRICKY', 160);
      setTargetEROAS('MOLOCO', 140);
      setTargetEROAS('REGULAR', 140);
      ui.alert('‚úÖ Reset', 'All targets reset to defaults', ui.ButtonSet.OK);
    }
  }
}

// Growth Thresholds Wizard
function growthThresholdsWizard() {
  const choice = showChoice('üìä Growth Status Thresholds', [
    'View Current Settings',
    'Update Single Project',
    'Update All Projects',
    'Reset to Defaults',
    'View Growth Criteria Explanation'
  ]);
  
  if (!choice) return;
  
  const ui = SpreadsheetApp.getUi();
  
  if (choice === 1) {
    viewCurrentThresholds();
    
  } else if (choice === 2) {
    const project = showChoice('Select Project:', MENU_PROJECTS);
    if (project) {
      updateSingleProjectThresholds(MENU_PROJECTS[project-1].toUpperCase());
    }
    
  } else if (choice === 3) {
    updateAllProjectsThresholds();
    
  } else if (choice === 4) {
    resetAllThresholdsToDefaults();
    
  } else if (choice === 5) {
    showGrowthCriteriaExplanation();
  }
}

// View current thresholds for all projects
function viewCurrentThresholds() {
  const ui = SpreadsheetApp.getUi();
  let message = 'üìä CURRENT GROWTH THRESHOLDS\n\n';
  
  MENU_PROJECTS.forEach(project => {
    const projectName = project.toUpperCase();
    const thresholds = getGrowthThresholds(projectName);
    
    message += `${project}:\n`;
    message += `üü¢ Healthy Growth: Spend >${thresholds.healthyGrowth.minSpendChange}%, Profit >${thresholds.healthyGrowth.minProfitChange}%\n`;
    message += `üî¥ Inefficient Growth: Spend >${thresholds.inefficientGrowth.minSpendChange}%, Profit <${thresholds.inefficientGrowth.maxProfitChange}%\n`;
    message += `üîµ Scaling Down: Spend <${thresholds.scalingDown.maxSpendChange}%\n`;
    message += `üü° Moderate Growth: Spend >${thresholds.moderateGrowthSpend}%, Profit >${thresholds.moderateGrowthProfit}%\n\n`;
  });
  
  ui.alert('Growth Thresholds', message, ui.ButtonSet.OK);
}

// Update thresholds for single project
function updateSingleProjectThresholds(projectName) {
  const ui = SpreadsheetApp.getUi();
  const current = getGrowthThresholds(projectName);
  
  // Show current values and get new ones
  let message = `${projectName} Current Thresholds:\n\n`;
  message += `üü¢ Healthy Growth: Spend >${current.healthyGrowth.minSpendChange}%, Profit >${current.healthyGrowth.minProfitChange}%\n`;
  message += `üî¥ Inefficient Growth: Spend >${current.inefficientGrowth.minSpendChange}%, Profit <${current.inefficientGrowth.maxProfitChange}%\n`;
  message += `üîµ Scaling Down: Spend <${current.scalingDown.maxSpendChange}%\n`;
  message += `üü° Moderate Growth: Spend >${current.moderateGrowthSpend}%, Profit >${current.moderateGrowthProfit}%\n\n`;
  message += 'Would you like to update these values?';
  
  if (ui.alert('Current Settings', message, ui.ButtonSet.YES_NO) !== ui.Button.YES) {
    return;
  }
  
  // Get new values
  const newThresholds = { ...current };
  
  // Healthy Growth thresholds
  const healthySpend = promptNumber(`Healthy Growth - Min Spend Change % (current: ${current.healthyGrowth.minSpendChange}):`, [10, 15, 20]);
  if (healthySpend !== null) newThresholds.healthyGrowth.minSpendChange = healthySpend;
  
  const healthyProfit = promptNumber(`Healthy Growth - Min Profit Change % (current: ${current.healthyGrowth.minProfitChange}):`, [5, 8, 10]);
  if (healthyProfit !== null) newThresholds.healthyGrowth.minProfitChange = healthyProfit;
  
  // Inefficient Growth thresholds
  const inefficientSpend = promptNumber(`Inefficient Growth - Min Spend Change % (current: ${current.inefficientGrowth.minSpendChange}):`, [10, 15, 20]);
  if (inefficientSpend !== null) newThresholds.inefficientGrowth.minSpendChange = inefficientSpend;
  
  const inefficientProfit = promptNumber(`Inefficient Growth - Max Profit Change % (current: ${current.inefficientGrowth.maxProfitChange}):`, [-5, -8, -10]);
  if (inefficientProfit !== null) newThresholds.inefficientGrowth.maxProfitChange = inefficientProfit;
  
  // Scaling Down threshold
  const scalingDown = promptNumber(`Scaling Down - Max Spend Change % (current: ${current.scalingDown.maxSpendChange}):`, [-10, -15, -20]);
  if (scalingDown !== null) newThresholds.scalingDown.maxSpendChange = scalingDown;
  
  // Moderate Growth thresholds
  const moderateSpend = promptNumber(`Moderate Growth - Min Spend Change % (current: ${current.moderateGrowthSpend}):`, [0, 2, 5]);
  if (moderateSpend !== null) newThresholds.moderateGrowthSpend = moderateSpend;
  
  const moderateProfit = promptNumber(`Moderate Growth - Min Profit Change % (current: ${current.moderateGrowthProfit}):`, [0, 2, 3]);
  if (moderateProfit !== null) newThresholds.moderateGrowthProfit = moderateProfit;
  
  // Save new thresholds
  setGrowthThresholds(projectName, newThresholds);
  ui.alert('‚úÖ Updated', `${projectName} growth thresholds have been updated!`, ui.ButtonSet.OK);
}

// Update thresholds for all projects
function updateAllProjectsThresholds() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('Update All Projects', 
               'This will allow you to set the same thresholds for all projects.\n\nContinue?', 
               ui.ButtonSet.YES_NO) !== ui.Button.YES) {
    return;
  }
  
  // Get common values
  const healthySpend = promptNumber('Healthy Growth - Min Spend Change %:', [10, 15, 20]);
  if (healthySpend === null) return;
  
  const healthyProfit = promptNumber('Healthy Growth - Min Profit Change %:', [5, 8, 10]);
  if (healthyProfit === null) return;
  
  const inefficientSpend = promptNumber('Inefficient Growth - Min Spend Change %:', [10, 15, 20]);
  if (inefficientSpend === null) return;
  
  const inefficientProfit = promptNumber('Inefficient Growth - Max Profit Change %:', [-5, -8, -10]);
  if (inefficientProfit === null) return;
  
  const scalingDown = promptNumber('Scaling Down - Max Spend Change %:', [-10, -15, -20]);
  if (scalingDown === null) return;
  
  const moderateSpend = promptNumber('Moderate Growth - Min Spend Change %:', [0, 2, 5]);
  if (moderateSpend === null) return;
  
  const moderateProfit = promptNumber('Moderate Growth - Min Profit Change %:', [0, 2, 3]);
  if (moderateProfit === null) return;
  
  // Apply to all projects
  const newThresholds = {
    healthyGrowth: { minSpendChange: healthySpend, minProfitChange: healthyProfit },
    inefficientGrowth: { minSpendChange: inefficientSpend, maxProfitChange: inefficientProfit },
    scalingDown: { maxSpendChange: scalingDown },
    moderateGrowthSpend: moderateSpend,
    moderateGrowthProfit: moderateProfit
  };
  
  MENU_PROJECTS.forEach(project => {
    setGrowthThresholds(project.toUpperCase(), newThresholds);
  });
  
  ui.alert('‚úÖ Updated', 'All projects have been updated with the new thresholds!', ui.ButtonSet.OK);
}

// Reset all thresholds to defaults
function resetAllThresholdsToDefaults() {
  const ui = SpreadsheetApp.getUi();
  
  if (ui.alert('Reset to Defaults?', 
               'This will reset all growth thresholds to their default values.\n\nContinue?', 
               ui.ButtonSet.YES_NO) !== ui.Button.YES) {
    return;
  }
  
  MENU_PROJECTS.forEach(project => {
    resetGrowthThresholds(project.toUpperCase());
  });
  
  ui.alert('‚úÖ Reset', 'All growth thresholds have been reset to defaults!', ui.ButtonSet.OK);
}

// Show growth criteria explanation
function showGrowthCriteriaExplanation() {
  const ui = SpreadsheetApp.getUi();
  
  const choice = showChoice('Select Project for Explanation:', MENU_PROJECTS);
  if (!choice) return;
  
  const projectName = MENU_PROJECTS[choice-1].toUpperCase();
  const explanation = getProjectGrowthStatusExplanation(projectName);
  
  ui.alert(`Growth Criteria - ${MENU_PROJECTS[choice-1]}`, explanation, ui.ButtonSet.OK);
}

// Helper UI Functions
function showChoice(title, options) {
  const ui = SpreadsheetApp.getUi();
  const numbered = options.map((opt, i) => `${i + 1} - ${opt}`).join('\n');
  const result = ui.prompt(title, `${numbered}\n\nEnter number:`, ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  const choice = parseInt(result.getResponseText());
  return (choice >= 1 && choice <= options.length) ? choice : null;
}

function showMultiChoice(title, options) {
  const ui = SpreadsheetApp.getUi();
  const numbered = options.map((opt, i) => `${i + 1} - ${opt}`).join('\n');
  const result = ui.prompt(title, 
    `${numbered}\n\nEnter numbers separated by commas (e.g., 1,3):`, 
    ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  return result.getResponseText()
    .split(',')
    .map(n => parseInt(n.trim()))
    .filter(n => n >= 1 && n <= options.length)
    .map(n => options[n-1]);
}

function promptNumber(prompt, suggestions = []) {
  const ui = SpreadsheetApp.getUi();
  const hint = suggestions.length > 0 ? ` (e.g., ${suggestions.join(', ')})` : '';
  const result = ui.prompt('Input Required', prompt + hint, ui.ButtonSet.OK_CANCEL);
  
  if (result.getSelectedButton() !== ui.Button.OK) return null;
  
  const num = parseInt(result.getResponseText());
  return isNaN(num) ? null : num;
}

function promptDateRange() {
  const ui = SpreadsheetApp.getUi();
  
  const start = ui.prompt('Start Date', 
    'Enter date (YYYY-MM-DD):\n\nExample: 2024-01-01', 
    ui.ButtonSet.OK_CANCEL);
  if (start.getSelectedButton() !== ui.Button.OK) return null;
  
  const end = ui.prompt('End Date', 
    'Enter date (YYYY-MM-DD):\n\nExample: 2024-12-31', 
    ui.ButtonSet.OK_CANCEL);
  if (end.getSelectedButton() !== ui.Button.OK) return null;
  
  if (!isValidDate(start.getResponseText()) || !isValidDate(end.getResponseText())) {
    ui.alert('‚ùå Invalid date format');
    return null;
  }
  
  return { start: start.getResponseText(), end: end.getResponseText() };
}

// Quick Actions
function quickGenerateAllForDays(days) {
  const ui = SpreadsheetApp.getUi();
  const progress = new ProgressManager(`All Reports - ${days} days`).start('Starting...');
  let success = 0;
  
  try {
    MENU_PROJECTS.forEach((p, i) => {
      progress.update(`${p}...`, `${i + 1}/${MENU_PROJECTS.length}`);
      try { 
        generateProjectReport(p.toUpperCase(), days); 
        success++; 
      } catch(e) { 
        console.error(e); 
      }
    });
    progress.end();
    ui.alert('‚úÖ Complete', `Generated ${success}/${MENU_PROJECTS.length} reports`, ui.ButtonSet.OK);
  } catch(e) {
    progress.end(false);
    ui.alert('‚ùå Error', e.toString(), ui.ButtonSet.OK);
  }
}

// Wizard functions
function commentsWizard() {
  const choice = showChoice('üí¨ Comments Management', [
    'Save All Comments Now',
    'Save Single Project',
    'View Auto-Cache Status',
    'Configure Auto-Cache'
  ]);
  
  if (!choice) return;
  
  switch(choice) {
    case 1: saveAllCommentsToCache(); break;
    case 2: 
      const p = showChoice('Select Project:', MENU_PROJECTS);
      if (p) this[`save${MENU_PROJECTS[p-1]}CommentsToCache`]();
      break;
    case 3: showAutomationStatus(); break;
    case 4: showAutoCacheSettings(); break;
  }
}

function clearDataWizard() {
  const choice = showChoice('üóëÔ∏è Clear Data', [
    'Clear All Projects',
    'Clear Single Project', 
    'View What Will Be Cleared'
  ]);
  
  if (!choice) return;
  
  if (choice === 1) {
    clearAllProjectsData();
  } else if (choice === 2) {
    const p = showChoice('Select Project:', MENU_PROJECTS);
    if (p) clearProjectAllData(MENU_PROJECTS[p-1].toUpperCase());
  } else {
    SpreadsheetApp.getUi().alert('Info', 
      'Clear Data will:\n\n' +
      '‚úì Remove all report data\n' +
      '‚úì Preserve saved comments\n' +
      '‚úì Keep your settings\n\n' +
      'Comments can be restored after clearing.',
      SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

function apiCheckWizard() {
  const choice = showChoice('üîç API Health Check', [
    'Quick Check All Projects',
    'Check Single Project',
    'Test with Custom Date Range'
  ]);
  
  if (!choice) return;
  
  if (choice === 1) {
    checkAllProjectsAPI();
  } else if (choice === 2) {
    const p = showChoice('Select Project:', MENU_PROJECTS);
    if (p) checkProjectAPI(MENU_PROJECTS[p-1].toUpperCase());
  } else {
    const dates = promptDateRange();
    if (dates) testAPIWithDateRange(dates.start, dates.end);
  }
}

function debugWizard() {
  const p = showChoice('üêõ Debug Tools', MENU_PROJECTS);
  if (p) debugProjectReportGeneration(MENU_PROJECTS[p-1].toUpperCase());
}

// Run functions
function runSelectedProjects(projects, days) {
  projects.forEach(p => generateProjectReport(p.toUpperCase(), days));
  SpreadsheetApp.getUi().alert('‚úÖ Complete', `Generated ${projects.length} reports`, SpreadsheetApp.getUi().ButtonSet.OK);
}

function runAllProjectsDateRange(start, end) {
  MENU_PROJECTS.forEach(p => generateProjectReportForDateRange(p.toUpperCase(), start, end));
  SpreadsheetApp.getUi().alert('‚úÖ Complete', 'All reports generated', SpreadsheetApp.getUi().ButtonSet.OK);
}

function runSelectedProjectsDateRange(projects, start, end) {
  projects.forEach(p => generateProjectReportForDateRange(p.toUpperCase(), start, end));
  SpreadsheetApp.getUi().alert('‚úÖ Complete', `Generated ${projects.length} reports`, SpreadsheetApp.getUi().ButtonSet.OK);
}

// Toggle functions
function toggleAutoCache() {
  const props = PropertiesService.getScriptProperties();
  const isOn = props.getProperty('AUTO_CACHE_ENABLED') === 'true';
  isOn ? disableAutoCache() : enableAutoCache();
}

function toggleAutoUpdate() {
  const props = PropertiesService.getScriptProperties();
  const isOn = props.getProperty('AUTO_UPDATE_ENABLED') === 'true';
  isOn ? disableAutoUpdate() : enableAutoUpdate();
}

// Core functions
function generateProjectReport(projectName, days) {
  setCurrentProject(projectName);
  generateReport(days);
}

function generateProjectReportForDateRange(projectName, startDate, endDate) {
  setCurrentProject(projectName);
  generateReportForDateRange(startDate, endDate);
}

function debugProjectReportGeneration(projectName) {
  setCurrentProject(projectName);
  debugReportGeneration();
}

// Dynamic compatibility functions
MENU_PROJECTS.forEach(p => {
  MENU_DAYS.forEach(d => {
    this[`generate${p}Report${d}`] = () => generateProjectReport(p.toUpperCase(), d);
  });
  this[`save${p}CommentsToCache`] = () => {
    setCurrentProject(p.toUpperCase());
    saveProjectCommentsManual(p.toUpperCase());
    SpreadsheetApp.getUi().alert('‚úÖ Success', `${p} comments saved`, SpreadsheetApp.getUi().ButtonSet.OK);
  };
  this[`show${p}DaysDialog`] = () => smartReportWizard();
  this[`show${p}DateRangeDialog`] = () => smartReportWizard();
  this[`debug${p}ReportGeneration`] = () => debugProjectReportGeneration(p.toUpperCase());
  this[`show${p}TargetSettings`] = () => targetSettingsWizard();
});

// Legacy support
function generateReport30() { generateProjectReport('TRICKY', 30); }
function generateReport60() { generateProjectReport('TRICKY', 60); }
function generateReport90() { generateProjectReport('TRICKY', 90); }
function saveCommentsToCache() { saveTrickyCommentsToCache(); }
function showDaysDialog() { smartReportWizard(); }
function showDateRangeDialog() { smartReportWizard(); }
function clearAllData() { clearProjectAllData('TRICKY'); }
