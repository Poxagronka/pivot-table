/**
 * Analytics Functions - Multi Project Support
 * Contains all analytical calculations and metrics
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: WoW –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ campaignId –≤–º–µ—Å—Ç–æ sourceApp
 */

/**
 * Calculate Week-over-Week metrics per campaign and per app
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–∞–∂–¥—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ campaignId
 */
function calculateWoWMetrics(appData) {
  if (!appData || typeof appData !== 'object') {
    console.error('Invalid appData provided to calculateWoWMetrics');
    return { campaignWoW: {}, appWeekWoW: {} };
  }

  try {
    const campaignData = {};
    const appWeekData = {};

    // Aggregate raw data
    Object.values(appData).forEach(app => {
      appWeekData[app.appName] = {};
      Object.values(app.weeks).forEach(week => {
        const spend = week.campaigns.reduce((s, c) => s + c.spend, 0);
        const profit = week.campaigns.reduce((s, c) => s + c.eProfitForecast, 0);
        appWeekData[app.appName][week.weekStart] = { weekStart: week.weekStart, spend, profit };

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ campaignId –≤–º–µ—Å—Ç–æ sourceApp
        week.campaigns.forEach(c => {
          if (c.campaignId) {
            const key = `${c.campaignId}_${week.weekStart}`;
            campaignData[key] = {
              campaignId: c.campaignId,
              campaignName: c.campaignName,
              sourceApp: c.sourceApp,
              weekStart: week.weekStart,
              spend: c.spend,
              eRoasForecast: c.eRoasForecast,
              eProfitForecast: c.eProfitForecast,
              installs: c.installs,
              cpi: c.cpi,
              roas: c.roas,
              ipm: c.ipm,
              eArpuForecast: c.eArpuForecast
            };
          }
        });
      });
    });

    // Compute campaign WoW - –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ campaignId
    const campaigns = {};
    Object.values(campaignData).forEach(d => {
      if (!campaigns[d.campaignId]) campaigns[d.campaignId] = [];
      campaigns[d.campaignId].push(d);
    });

    const campaignWoW = {};
    Object.keys(campaigns).forEach(campaignId => {
      campaigns[campaignId].sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      campaigns[campaignId].forEach((curr, i) => {
        const key = `${campaignId}_${curr.weekStart}`;
        campaignWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = campaigns[campaignId][i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.eProfitForecast ? ((curr.eProfitForecast - prev.eProfitForecast) / Math.abs(prev.eProfitForecast)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct);
          campaignWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    // Compute app-level WoW (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const appWeekWoW = {};
    Object.keys(appWeekData).forEach(appName => {
      const weeks = Object.values(appWeekData[appName]).sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      weeks.forEach((curr, i) => {
        const key = `${appName}_${curr.weekStart}`;
        appWeekWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = weeks[i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.profit ? ((curr.profit - prev.profit) / Math.abs(prev.profit)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct, 'profit');
          appWeekWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º campaignWoW –≤–º–µ—Å—Ç–æ sourceAppWoW
    return { campaignWoW, appWeekWoW };
  } catch (error) {
    console.error('Error calculating WoW metrics:', error);
    return { campaignWoW: {}, appWeekWoW: {} };
  }
}

/**
 * Calculate growth status based on spend and profit changes
 * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å fallback –Ω–∞ —Ä–∞–±–æ—á–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
 */
function calculateGrowthStatus(prev, curr, spendPct, profitPct, profitField = 'eProfitForecast') {
  const prevProfit = profitField === 'profit' ? prev.profit : prev.eProfitForecast;
  const currProfit = profitField === 'profit' ? curr.profit : curr.eProfitForecast;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ —Å fallback –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  let thresholds;
  try {
    thresholds = getGrowthThresholds(CURRENT_PROJECT);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –µ—Å—Ç—å
    if (!thresholds.healthyGrowth || !thresholds.inefficientGrowth || !thresholds.scalingDown) {
      throw new Error('Incomplete thresholds');
    }
  } catch (e) {
    // Fallback –Ω–∞ —Ä–∞–±–æ—á–∏–µ hardcoded –∑–Ω–∞—á–µ–Ω–∏—è
    console.log('Using fallback thresholds for', CURRENT_PROJECT);
    thresholds = {
      healthyGrowth: { minSpendChange: 10, minProfitChange: 5 },
      inefficientGrowth: { minSpendChange: 0, maxProfitChange: -8 },
      scalingDown: { maxSpendChange: -15 },
      moderateGrowthSpend: 3,
      moderateGrowthProfit: 2,
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
      efficiencyImprovement: { maxSpendDecline: -5, minProfitGrowth: 8 },
      decliningEfficiency: { minSpendStable: -2, maxSpendGrowth: 10, maxProfitDecline: -4, minProfitDecline: -7 },
      moderateDecline: { maxSpendDecline: -3, maxProfitDecline: -3 },
      stable: { maxAbsoluteChange: 2 },
      minimalGrowth: { maxSpendChange: 2, maxProfitChange: 1 }
    };
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–∏–±—ã–ª—å—é –∏ —É–±—ã—Ç–∫–æ–º (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã)
  if (prevProfit < 0 && currProfit > 0) {
    return 'üü¢ Healthy Growth';
  }
  if (prevProfit > 0 && currProfit < 0) {
    return 'üî¥ Inefficient Growth';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
  if (profitPct <= thresholds.inefficientGrowth.maxProfitChange) {
    return 'üî¥ Inefficient Growth';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ó–¥–æ—Ä–æ–≤—ã–π —Ä–æ—Å—Ç
  if (spendPct >= thresholds.healthyGrowth.minSpendChange && 
      profitPct >= thresholds.healthyGrowth.minProfitChange) {
    return 'üü¢ Healthy Growth';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 4: –£–ª—É—á—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (thresholds.efficiencyImprovement) {
    if (spendPct <= thresholds.efficiencyImprovement.maxSpendDecline && 
        profitPct >= thresholds.efficiencyImprovement.minProfitGrowth) {
      return 'üü¢ Efficiency Improvement';
    }
    if (spendPct <= thresholds.efficiencyImprovement.maxSpendDecline && 
        profitPct > 0 && profitPct < thresholds.efficiencyImprovement.minProfitGrowth) {
      return 'üü° Efficiency Improvement';
    }
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 5: Scaling Down
  if (spendPct <= thresholds.scalingDown.maxSpendChange) {
    // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ scaling down –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å
    if (thresholds.scalingDown.efficient && profitPct >= 0) {
      return 'üîµ Scaling Down - Efficient';
    }
    if (thresholds.scalingDown.moderate && profitPct >= -10 && profitPct < 0) {
      return 'üîµ Scaling Down - Moderate';
    }
    if (thresholds.scalingDown.problematic && profitPct < -15) {
      return 'üîµ Scaling Down - Problematic';
    }
    return 'üîµ Scaling Down';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 6: –°–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (thresholds.decliningEfficiency) {
    if (spendPct >= thresholds.decliningEfficiency.minSpendStable && 
        spendPct <= thresholds.decliningEfficiency.maxSpendGrowth &&
        profitPct >= thresholds.decliningEfficiency.maxProfitDecline && 
        profitPct <= thresholds.decliningEfficiency.minProfitDecline) {
      return 'üü† Declining Efficiency';
    }
  } else {
    // Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    if (spendPct > 5 && profitPct < -2) {
      return 'üü† Declining Efficiency';
    }
    if (spendPct >= -2 && profitPct < -10) {
      return 'üü† Declining Efficiency';
    }
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 7: –£–º–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å–ø–∞–¥–∞
  if (thresholds.moderateDecline && 
      spendPct < 0 && profitPct < 0 && 
      spendPct >= thresholds.moderateDecline.maxSpendDecline && 
      profitPct >= thresholds.moderateDecline.maxProfitDecline) {
    
    const spendDeclineAbs = Math.abs(spendPct);
    const profitDeclineAbs = Math.abs(profitPct);
    
    if (spendDeclineAbs >= profitDeclineAbs * 1.5) {
      return 'üü° Moderate Decline - Spend Optimization';
    }
    if (profitDeclineAbs >= spendDeclineAbs * 1.5) {
      return 'üü° Moderate Decline - Efficiency Drop';
    }
    return 'üü° Moderate Decline - Proportional';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 8: –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç
  if (spendPct > thresholds.moderateGrowthSpend && 
      profitPct > thresholds.moderateGrowthProfit) {
    return 'üü° Moderate Growth';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 9: Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  if (spendPct < -5 && profitPct < -5 && spendPct > thresholds.scalingDown.maxSpendChange) {
    return 'üü° Moderate Decline';
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 10: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
  if (spendPct > 0 && profitPct > 0) {
    if (thresholds.minimalGrowth && 
        spendPct <= thresholds.minimalGrowth.maxSpendChange && 
        profitPct <= thresholds.minimalGrowth.maxProfitChange) {
      return 'üü° Minimal Growth';
    }
    if (spendPct <= thresholds.moderateGrowthSpend || profitPct <= thresholds.moderateGrowthProfit) {
      return 'üü° Minimal Growth';
    }
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 11: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
  if (thresholds.stable) {
    if (Math.abs(spendPct) <= thresholds.stable.maxAbsoluteChange && 
        Math.abs(profitPct) <= thresholds.stable.maxAbsoluteChange) {
      return '‚ö™ Stable';
    }
  }
  
  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–º
  return '‚ö™ Stable';
}

/**
 * Calculate growth status for specific project using its thresholds
 */
function calculateProjectGrowthStatus(projectName, prev, curr, spendPct, profitPct, profitField = 'eProfitForecast') {
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  
  try {
    return calculateGrowthStatus(prev, curr, spendPct, profitPct, profitField);
  } finally {
    setCurrentProject(originalProject);
  }
}

/**
 * Get growth status explanation for current project
 */
function getGrowthStatusExplanation() {
  let thresholds;
  try {
    thresholds = getGrowthThresholds(CURRENT_PROJECT);
  } catch (e) {
    thresholds = {
      healthyGrowth: { minSpendChange: 10, minProfitChange: 5 },
      inefficientGrowth: { maxProfitChange: -8 },
      scalingDown: { maxSpendChange: -15 },
      moderateGrowthSpend: 3,
      moderateGrowthProfit: 2
    };
  }
  
  return `Growth Status Criteria for ${CURRENT_PROJECT}:

üü¢ –ü–û–ó–ò–¢–ò–í–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Healthy Growth: Spend ‚â•${thresholds.healthyGrowth.minSpendChange}% AND Profit ‚â•${thresholds.healthyGrowth.minProfitChange}%
‚Ä¢ Efficiency Improvement: –°–ø–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ—Ñ–∏—Ç —Ä–∞—Å—Ç–µ—Ç
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —É–±—ã—Ç–∫–∞ –≤ –ø—Ä–∏–±—ã–ª—å

üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Inefficient Growth: Profit ‚â§${thresholds.inefficientGrowth.maxProfitChange}%
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –ø—Ä–∏–±—ã–ª–∏ –≤ —É–±—ã—Ç–æ–∫

üü† –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–Æ–©–ò–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Declining Efficiency: –°–ø–µ–Ω–¥ —Ä–∞—Å—Ç–µ—Ç/—Å—Ç–∞–±–∏–ª–µ–Ω, –ø—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ

üîµ –°–¶–ï–ù–ê–†–ò–ò –°–û–ö–†–ê–©–ï–ù–ò–Ø:
‚Ä¢ Scaling Down: Spend ‚â§${thresholds.scalingDown.maxSpendChange}%
  - Efficient: –ø—Ä–æ—Ñ–∏—Ç —Å—Ç–∞–±–∏–ª–µ–Ω/—Ä–∞—Å—Ç–µ—Ç
  - Moderate: –ø—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ
  - Problematic: –ø—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω–æ

üü° –£–ú–ï–†–ï–ù–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Moderate Growth: Spend >${thresholds.moderateGrowthSpend}% AND Profit >${thresholds.moderateGrowthProfit}%
‚Ä¢ Minimal Growth: –ù–µ–±–æ–ª—å—à–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ Moderate Decline: –£–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  - Spend Optimization: —Å–ø–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
  - Efficiency Drop: –ø—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ
  - Proportional: –æ–±–∞ –ø–∞–¥–∞—é—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

‚ö™ –°–¢–ê–ë–ò–õ–¨–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Stable: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É`;
}

/**
 * Get growth status explanation for specific project
 */
function getProjectGrowthStatusExplanation(projectName) {
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  
  try {
    return getGrowthStatusExplanation();
  } finally {
    setCurrentProject(originalProject);
  }
}

/**
 * Get detailed scenario analysis for debugging
 */
function analyzeGrowthScenario(spendPct, profitPct, projectName = CURRENT_PROJECT) {
  let thresholds;
  try {
    thresholds = getGrowthThresholds(projectName);
  } catch (e) {
    thresholds = {
      healthyGrowth: { minSpendChange: 10, minProfitChange: 5 },
      inefficientGrowth: { maxProfitChange: -8 },
      scalingDown: { maxSpendChange: -15 },
      moderateGrowthSpend: 3,
      moderateGrowthProfit: 2
    };
  }
  
  const analysis = {
    spendPct,
    profitPct,
    projectName,
    thresholds,
    categories: {
      spendUp: spendPct > thresholds.moderateGrowthSpend,
      spendDown: spendPct < -thresholds.moderateGrowthSpend,
      spendStable: Math.abs(spendPct) <= 2,
      profitUp: profitPct > thresholds.moderateGrowthProfit,
      profitDown: profitPct < -thresholds.moderateGrowthProfit,
      profitStable: Math.abs(profitPct) <= 2,
      spendBigUp: spendPct >= thresholds.healthyGrowth.minSpendChange,
      spendBigDown: spendPct <= thresholds.scalingDown.maxSpendChange,
      profitBigUp: profitPct >= thresholds.healthyGrowth.minProfitChange,
      profitBigDown: profitPct <= thresholds.inefficientGrowth.maxProfitChange
    }
  };
  
  // Simulate the status calculation
  const mockPrev = { eProfitForecast: 100, spend: 100 };
  const mockCurr = { eProfitForecast: 100 + profitPct, spend: 100 + spendPct };
  
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  analysis.status = calculateGrowthStatus(mockPrev, mockCurr, spendPct, profitPct);
  setCurrentProject(originalProject);
  
  return analysis;
}

/**
 * Main: generate report for the last N days without progress indicators
 */
function generateReport(days) {
  try {
    const config = getCurrentConfig();
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Calculate date range
    const dateRange = getDateRange(days);
    
    // Fetch data from API
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      SpreadsheetApp.getUi().alert('No data found for the specified period.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      SpreadsheetApp.getUi().alert('No valid data to process.');
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
  } catch (e) {
    console.error('Error generating report:', e);
    SpreadsheetApp.getUi().alert('Error', 'Error generating report: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Generate report for specific date range without progress indicators
 */
function generateReportForDateRange(startDate, endDate) {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const config = getCurrentConfig();
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Fetch data from API
    const dateRange = { from: startDate, to: endDate };
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No Data', 'No data found for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      ui.alert('No Valid Data', 'No valid data to process for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Report generated successfully!\n\nDate range: ${startDate} to ${endDate}`, ui.ButtonSet.OK);
  } catch (e) {
    console.error('Error generating report for date range:', e);
    ui.alert(
      'Error', 
      'Error generating report:\n\n' + e.toString() + '\n\nPlease check:\n' +
      '1. Your internet connection\n' +
      '2. The API token is still valid\n' +
      '3. Try a smaller date range',
      ui.ButtonSet.OK
    );
  }
}

/**
 * Update all data to current - fetches from first existing week to current date
 */
function updateAllDataToCurrent() {
  const ui = SpreadsheetApp.getUi();
  const config = getCurrentConfig();
  const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
  const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
  
  if (!sheet || sheet.getLastRow() < 2) {
    ui.alert('No existing data found. Please create a report first.');
    return;
  }
  
  try {
    // Expand all groups first to ensure we can read all data
    expandAllGroups(sheet);
    
    // Save existing comments first
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    // Find the earliest week in the sheet
    let earliestDate = null;
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === 'WEEK') {
        const weekRange = data[i][1];
        const [startStr, endStr] = weekRange.split(' - ');
        const startDate = new Date(startStr);
        if (!earliestDate || startDate < earliestDate) {
          earliestDate = startDate;
        }
      }
    }
    
    if (!earliestDate) {
      ui.alert('No week data found in the sheet.');
      return;
    }
    
    // Calculate date range from earliest date to yesterday (excluding current incomplete week)
    const today = new Date();
    const dayOfWeek = today.getDay();
    let endDate;
    if (dayOfWeek === 0) {
      // Today is Sunday, include up to yesterday (Saturday)
      endDate = new Date(today);
      endDate.setDate(today.getDate() - 1);
    } else {
      // Today is Mon-Sat, include up to last Saturday
      const daysFromLastSaturday = dayOfWeek === 0 ? 1 : dayOfWeek;
      endDate = new Date(today);
      endDate.setDate(today.getDate() - daysFromLastSaturday);
    }
    
    const dateRange = {
      from: formatDateForAPI(earliestDate),
      to: formatDateForAPI(endDate)
    };
    
    // Fetch all data for the complete range
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No data found for the date range.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    
    if (Object.keys(processed).length === 0) {
      ui.alert('No valid data to process.');
      return;
    }
    
    // Clear old data silently
    clearAllDataSilent();
    
    // Create updated report
    createEnhancedPivotTable(processed);
    
    // Restore comments
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Successfully updated all data from ${dateRange.from} to ${dateRange.to}!`, ui.ButtonSet.OK);
    
  } catch (e) {
    console.error('Error updating data:', e);
    ui.alert('Error', 'Error updating data: ' + e.toString(), ui.ButtonSet.OK);
  }
}
