/**
 * Analytics Functions - Multi Project Support
 * Complete growth status logic with comprehensive threshold system
 * –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */

/**
 * Calculate Week-over-Week metrics per app and per sourceApp
 */
function calculateWoWMetrics(appData) {
  if (!appData || typeof appData !== 'object') {
    console.error('Invalid appData provided to calculateWoWMetrics');
    return { sourceAppWoW: {}, appWeekWoW: {} };
  }

  try {
    const sourceAppData = {};
    const appWeekData = {};

    // Aggregate raw data
    Object.values(appData).forEach(app => {
      appWeekData[app.appName] = {};
      Object.values(app.weeks).forEach(week => {
        const spend = week.campaigns.reduce((s, c) => s + c.spend, 0);
        const profit = week.campaigns.reduce((s, c) => s + c.eProfitForecast, 0);
        appWeekData[app.appName][week.weekStart] = { weekStart: week.weekStart, spend, profit };

        week.campaigns.forEach(c => {
          if (c.sourceApp) {
            const key = `${c.sourceApp}_${week.weekStart}`;
            if (!sourceAppData[key]) {
              sourceAppData[key] = { 
                sourceApp: c.sourceApp, 
                weekStart: week.weekStart, 
                spend: 0, 
                eRoasForecast: 0, 
                eProfitForecast: 0, 
                count: 0 
              };
            }
            sourceAppData[key].spend += c.spend;
            sourceAppData[key].eRoasForecast += c.eRoasForecast;
            sourceAppData[key].eProfitForecast += c.eProfitForecast;
            sourceAppData[key].count += 1;
          }
        });
      });
    });

    // Compute sourceApp WoW
    const sourceApps = {};
    Object.values(sourceAppData).forEach(d => {
      if (d.count) d.eRoasForecast /= d.count;
      if (!sourceApps[d.sourceApp]) sourceApps[d.sourceApp] = [];
      sourceApps[d.sourceApp].push(d);
    });

    const sourceAppWoW = {};
    Object.keys(sourceApps).forEach(sourceAppName => {
      sourceApps[sourceAppName].sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      sourceApps[sourceAppName].forEach((curr, i) => {
        const key = `${sourceAppName}_${curr.weekStart}`;
        sourceAppWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = sourceApps[sourceAppName][i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.eProfitForecast ? ((curr.eProfitForecast - prev.eProfitForecast) / Math.abs(prev.eProfitForecast)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct);
          sourceAppWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    // Compute app-level WoW
    const appWeekWoW = {};
    Object.keys(appWeekData).forEach(appName => {
      const weeks = Object.values(appWeekData[appName]).sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      weeks.forEach((curr, i) => {
        const key = `${appName}_${curr.weekStart}`;
        appWeekWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = weeks[i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.profit ? ((curr.profit - prev.profit) / Math.abs(prev.profit)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct, 'profit');
          appWeekWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    return { sourceAppWoW, appWeekWoW };
  } catch (error) {
    console.error('Error calculating WoW metrics:', error);
    return { sourceAppWoW: {}, appWeekWoW: {} };
  }
}

/**
 * –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ—Å—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */
function calculateGrowthStatus(prev, curr, spendPct, profitPct, profitField = 'eProfitForecast') {
  const prevProfit = profitField === 'profit' ? prev.profit : prev.eProfitForecast;
  const currProfit = profitField === 'profit' ? curr.profit : curr.eProfitForecast;
  
  // Get project-specific thresholds
  const thresholds = getGrowthThresholds(CURRENT_PROJECT);
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 1: –û–°–û–ë–´–ï –°–õ–£–ß–ê–ò ====================
  // –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –ø—Ä–∏–±—ã–ª—å—é –∏ —É–±—ã—Ç–∫–æ–º –≤—Å–µ–≥–¥–∞ –≤–∞–∂–Ω–µ–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
  if (prevProfit < 0 && currProfit > 0) {
    return 'üü¢ Healthy Growth';  // –ò–∑ —É–±—ã—Ç–∫–∞ –≤ –ø—Ä–∏–±—ã–ª—å
  }
  if (prevProfit > 0 && currProfit < 0) {
    return 'üî¥ Inefficient Growth';  // –ò–∑ –ø—Ä–∏–±—ã–ª–∏ –≤ —É–±—ã—Ç–æ–∫
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ó–î–û–†–û–í–´–ô –†–û–°–¢ ====================
  if (spendPct >= thresholds.healthyGrowth.minSpendChange && 
      profitPct >= thresholds.healthyGrowth.minProfitChange) {
    return 'üü¢ Healthy Growth';
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 3: –£–õ–£–ß–®–ï–ù–ò–ï –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ====================
  if (spendPct <= thresholds.efficiencyImprovement.maxSpendDecline && 
      profitPct >= thresholds.efficiencyImprovement.minProfitGrowth) {
    return 'üü¢ Efficiency Improvement';  // –°–ø–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ—Ñ–∏—Ç —Ä–∞—Å—Ç–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
  }
  
  if (spendPct <= thresholds.efficiencyImprovement.maxSpendDecline && 
      profitPct > 0 && profitPct < thresholds.efficiencyImprovement.minProfitGrowth) {
    return 'üü° Efficiency Improvement';  // –°–ø–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç, –ø—Ä–æ—Ñ–∏—Ç —Ä–∞—Å—Ç–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò ====================
  if (profitPct <= thresholds.inefficientGrowth.maxProfitChange) {
    // –ü—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏
    if (spendPct >= thresholds.inefficientGrowth.minSpendChange) {
      return 'üî¥ Inefficient Growth';  // –°–ø–µ–Ω–¥ —Ä–∞—Å—Ç–µ—Ç/—Å—Ç–∞–±–∏–ª–µ–Ω + –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞
    }
    // –ï—Å–ª–∏ —Å–ø–µ–Ω–¥ —Ç–æ–∂–µ –ø–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å scaling down
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 5: –°–û–ö–†–ê–©–ï–ù–ò–ï (SCALING DOWN) ====================
  if (spendPct <= thresholds.scalingDown.maxSpendChange) {
    // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ–Ω–¥–∞
    if (profitPct >= thresholds.scalingDown.efficient.minProfitChange) {
      return 'üîµ Scaling Down - Efficient';  // –ü—Ä–æ—Ñ–∏—Ç —Å—Ç–∞–±–∏–ª–µ–Ω/—Ä–∞—Å—Ç–µ—Ç
    }
    if (profitPct >= thresholds.scalingDown.moderate.minProfitDecline && 
        profitPct <= thresholds.scalingDown.moderate.maxProfitDecline) {
      return 'üîµ Scaling Down - Moderate';  // –ü—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ
    }
    if (profitPct <= thresholds.scalingDown.problematic.maxProfitDecline) {
      return 'üîµ Scaling Down - Problematic';  // –ü—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω–æ
    }
    return 'üîµ Scaling Down';  // –û–±—â–∏–π —Å–ª—É—á–∞–π
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 6: –°–ù–ò–ñ–ï–ù–ò–ï –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò ====================
  if (spendPct >= thresholds.decliningEfficiency.minSpendStable && 
      spendPct <= thresholds.decliningEfficiency.maxSpendGrowth &&
      profitPct >= thresholds.decliningEfficiency.maxProfitDecline && 
      profitPct <= thresholds.decliningEfficiency.minProfitDecline) {
    return 'üü† Declining Efficiency';  // –°–ø–µ–Ω–¥ —Å—Ç–∞–±–∏–ª–µ–Ω/—Ä–∞—Å—Ç–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ, –ø—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 7: –£–ú–ï–†–ï–ù–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò –°–ü–ê–î–ê ====================
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–ø–∞–¥—ã (–æ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø–∞–¥–∞—é—Ç, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏)
  if (spendPct < 0 && profitPct < 0 && 
      spendPct >= thresholds.moderateDecline.maxSpendDecline && 
      profitPct >= thresholds.moderateDecline.maxProfitDecline) {
    
    const spendDeclineAbs = Math.abs(spendPct);
    const profitDeclineAbs = Math.abs(profitPct);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–º–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∞–¥–∞
    if (spendDeclineAbs >= profitDeclineAbs * thresholds.moderateDecline.spendOptimization.spendRatio) {
      return 'üü° Moderate Decline - Spend Optimization';  // –°–ø–µ–Ω–¥ –ø–∞–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ—Ñ–∏—Ç–∞ (—Ö–æ—Ä–æ—à–æ)
    }
    
    if (profitDeclineAbs >= spendDeclineAbs * thresholds.moderateDecline.efficiencyDrop.profitRatio) {
      return 'üü° Moderate Decline - Efficiency Drop';  // –ü—Ä–æ—Ñ–∏—Ç –ø–∞–¥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —Å–ø–µ–Ω–¥–∞ (–ø–ª–æ—Ö–æ)
    }
    
    const ratio = spendDeclineAbs > profitDeclineAbs ? 
                  spendDeclineAbs / profitDeclineAbs : 
                  profitDeclineAbs / spendDeclineAbs;
    
    if (ratio <= thresholds.moderateDecline.proportional.maxRatioDiff) {
      return 'üü° Moderate Decline - Proportional';  // –û–±–∞ –ø–∞–¥–∞—é—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ, –Ω–æ –æ–±–∞ –ø–∞–¥–∞—é—Ç —É–º–µ—Ä–µ–Ω–Ω–æ
    return 'üü° Moderate Decline - Proportional';
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 8: –£–ú–ï–†–ï–ù–ù–´–ô –†–û–°–¢ ====================
  if (spendPct >= thresholds.moderateGrowth.minSpendChange && 
      spendPct <= thresholds.moderateGrowth.maxSpendChange &&
      profitPct >= thresholds.moderateGrowth.minProfitChange && 
      profitPct <= thresholds.moderateGrowth.maxProfitChange) {
    return 'üü° Moderate Growth';  // –û–±–∞ —Ä–∞—Å—Ç—É—Ç, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞—é—Ç –ø–æ—Ä–æ–≥–æ–≤ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ä–æ—Å—Ç–∞
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 9: –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –†–û–°–¢ ====================
  if (spendPct > 0 && spendPct <= thresholds.minimalGrowth.maxSpendChange &&
      profitPct > 0 && profitPct <= thresholds.minimalGrowth.maxProfitChange) {
    return 'üü° Minimal Growth';  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 10: –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ ====================
  if (Math.abs(spendPct) <= thresholds.stable.maxAbsoluteChange && 
      Math.abs(profitPct) <= thresholds.stable.maxAbsoluteChange) {
    return '‚ö™ Stable';  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª—é–±—É—é —Å—Ç–æ—Ä–æ–Ω—É
  }
  
  // ==================== –ü–†–ò–û–†–ò–¢–ï–¢ 11: –û–°–¢–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò ====================
  // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ
  return '‚ö™ Stable';
}

/**
 * Calculate growth status for specific project using its thresholds
 */
function calculateProjectGrowthStatus(projectName, prev, curr, spendPct, profitPct, profitField = 'eProfitForecast') {
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  
  try {
    return calculateGrowthStatus(prev, curr, spendPct, profitPct, profitField);
  } finally {
    setCurrentProject(originalProject);
  }
}

/**
 * Get comprehensive growth status explanation for current project
 * –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
 */
function getGrowthStatusExplanation() {
  const thresholds = getGrowthThresholds(CURRENT_PROJECT);
  
  return `–ö–†–ò–¢–ï–†–ò–ò –°–¢–ê–¢–£–°–û–í –†–û–°–¢–ê –¥–ª—è ${CURRENT_PROJECT}:

üü¢ –ü–û–ó–ò–¢–ò–í–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Healthy Growth: Spend ‚â•${thresholds.healthyGrowth.minSpendChange}% –ò Profit ‚â•${thresholds.healthyGrowth.minProfitChange}%
‚Ä¢ Efficiency Improvement (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ): Spend ‚â§${thresholds.efficiencyImprovement.maxSpendDecline}% –ò Profit ‚â•${thresholds.efficiencyImprovement.minProfitGrowth}%
‚Ä¢ Efficiency Improvement (—É–º–µ—Ä–µ–Ω–Ω–æ–µ): Spend ‚â§${thresholds.efficiencyImprovement.maxSpendDecline}% –ò Profit >0% –Ω–æ <${thresholds.efficiencyImprovement.minProfitGrowth}%
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —É–±—ã—Ç–∫–∞ –≤ –ø—Ä–∏–±—ã–ª—å

üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Inefficient Growth: Profit ‚â§${thresholds.inefficientGrowth.maxProfitChange}% –ø—Ä–∏ Spend ‚â•${thresholds.inefficientGrowth.minSpendChange}%
‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ –ø—Ä–∏–±—ã–ª–∏ –≤ —É–±—ã—Ç–æ–∫

üü† –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–Æ–©–ò–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Declining Efficiency: Spend –æ—Ç ${thresholds.decliningEfficiency.minSpendStable}% –¥–æ ${thresholds.decliningEfficiency.maxSpendGrowth}% –ò Profit –æ—Ç ${thresholds.decliningEfficiency.maxProfitDecline}% –¥–æ ${thresholds.decliningEfficiency.minProfitDecline}%

üîµ –°–¶–ï–ù–ê–†–ò–ò –°–û–ö–†–ê–©–ï–ù–ò–Ø:
‚Ä¢ Scaling Down - Efficient: Spend ‚â§${thresholds.scalingDown.maxSpendChange}% –ò Profit ‚â•${thresholds.scalingDown.efficient.minProfitChange}%
‚Ä¢ Scaling Down - Moderate: Spend ‚â§${thresholds.scalingDown.maxSpendChange}% –ò Profit –æ—Ç ${thresholds.scalingDown.moderate.minProfitDecline}% –¥–æ ${thresholds.scalingDown.moderate.maxProfitDecline}%
‚Ä¢ Scaling Down - Problematic: Spend ‚â§${thresholds.scalingDown.maxSpendChange}% –ò Profit ‚â§${thresholds.scalingDown.problematic.maxProfitDecline}%

üü° –£–ú–ï–†–ï–ù–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Moderate Growth: Spend ${thresholds.moderateGrowth.minSpendChange}%-${thresholds.moderateGrowth.maxSpendChange}% –ò Profit ${thresholds.moderateGrowth.minProfitChange}%-${thresholds.moderateGrowth.maxProfitChange}%
‚Ä¢ Minimal Growth: Spend ‚â§${thresholds.minimalGrowth.maxSpendChange}% –ò Profit ‚â§${thresholds.minimalGrowth.maxProfitChange}% (–æ–±–∞ >0%)
‚Ä¢ Moderate Decline - Spend Optimization: –û–±–∞ –ø–∞–¥–∞—é—Ç, —Å–ø–µ–Ω–¥ –±—ã—Å—Ç—Ä–µ–µ –≤ ${thresholds.moderateDecline.spendOptimization.spendRatio}+ —Ä–∞–∑
‚Ä¢ Moderate Decline - Efficiency Drop: –û–±–∞ –ø–∞–¥–∞—é—Ç, –ø—Ä–æ—Ñ–∏—Ç –±—ã—Å—Ç—Ä–µ–µ –≤ ${thresholds.moderateDecline.efficiencyDrop.profitRatio}+ —Ä–∞–∑  
‚Ä¢ Moderate Decline - Proportional: –û–±–∞ –ø–∞–¥–∞—é—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (—Ä–∞–∑–Ω–∏—Ü–∞ ‚â§${thresholds.moderateDecline.proportional.maxRatioDiff}x)

‚ö™ –°–¢–ê–ë–ò–õ–¨–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:
‚Ä¢ Stable: –ò–∑–º–µ–Ω–µ–Ω–∏—è ‚â§¬±${thresholds.stable.maxAbsoluteChange}% –ø–æ –æ–±–µ–∏–º –º–µ—Ç—Ä–∏–∫–∞–º

–¢–ï–ö–£–©–ò–ï –ü–û–†–û–ì–ò:
‚Ä¢ –ó–¥–æ—Ä–æ–≤—ã–π —Ä–æ—Å—Ç: ${thresholds.healthyGrowth.minSpendChange}%/${thresholds.healthyGrowth.minProfitChange}%
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞: ${thresholds.inefficientGrowth.maxProfitChange}%
‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å–ø–µ–Ω–¥–∞: ${thresholds.scalingDown.maxSpendChange}%
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ¬±${thresholds.stable.maxAbsoluteChange}%`;
}

/**
 * Get growth status explanation for specific project
 */
function getProjectGrowthStatusExplanation(projectName) {
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  
  try {
    return getGrowthStatusExplanation();
  } finally {
    setCurrentProject(originalProject);
  }
}

/**
 * Get detailed scenario analysis for debugging - –û–ë–ù–û–í–õ–ï–ù–û
 */
function analyzeGrowthScenario(spendPct, profitPct, projectName = CURRENT_PROJECT) {
  const thresholds = getGrowthThresholds(projectName);
  
  const analysis = {
    spendPct,
    profitPct,
    projectName,
    thresholds,
    categories: {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      spendUp: spendPct > thresholds.moderateGrowth.minSpendChange,
      spendDown: spendPct < -thresholds.moderateGrowth.minSpendChange,
      spendStable: Math.abs(spendPct) <= thresholds.stable.maxAbsoluteChange,
      profitUp: profitPct > thresholds.moderateGrowth.minProfitChange,
      profitDown: profitPct < -thresholds.moderateGrowth.minProfitChange,
      profitStable: Math.abs(profitPct) <= thresholds.stable.maxAbsoluteChange,
      
      // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      spendBigUp: spendPct >= thresholds.healthyGrowth.minSpendChange,
      spendBigDown: spendPct <= thresholds.scalingDown.maxSpendChange,
      profitBigUp: profitPct >= thresholds.healthyGrowth.minProfitChange,
      profitBigDown: profitPct <= thresholds.inefficientGrowth.maxProfitChange,
      
      // –ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      efficiencyImprovement: spendPct <= thresholds.efficiencyImprovement.maxSpendDecline && profitPct >= thresholds.efficiencyImprovement.minProfitGrowth,
      decliningEfficiency: spendPct >= thresholds.decliningEfficiency.minSpendStable && spendPct <= thresholds.decliningEfficiency.maxSpendGrowth && profitPct >= thresholds.decliningEfficiency.maxProfitDecline && profitPct <= thresholds.decliningEfficiency.minProfitDecline,
      moderateDecline: spendPct < 0 && profitPct < 0 && spendPct >= thresholds.moderateDecline.maxSpendDecline && profitPct >= thresholds.moderateDecline.maxProfitDecline
    }
  };
  
  // Simulate the status calculation
  const mockPrev = { eProfitForecast: 100, spend: 100 };
  const mockCurr = { eProfitForecast: 100 + profitPct, spend: 100 + spendPct };
  
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  analysis.status = calculateGrowthStatus(mockPrev, mockCurr, spendPct, profitPct);
  setCurrentProject(originalProject);
  
  return analysis;
}

/**
 * Main: generate report for the last N days without progress indicators
 */
function generateReport(days) {
  try {
    const config = getCurrentConfig();
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Calculate date range
    const dateRange = getDateRange(days);
    
    // Fetch data from API
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      SpreadsheetApp.getUi().alert('No data found for the specified period.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      SpreadsheetApp.getUi().alert('No valid data to process.');
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
  } catch (e) {
    console.error('Error generating report:', e);
    SpreadsheetApp.getUi().alert('Error', 'Error generating report: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Generate report for specific date range without progress indicators
 */
function generateReportForDateRange(startDate, endDate) {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const config = getCurrentConfig();
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Fetch data from API
    const dateRange = { from: startDate, to: endDate };
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No Data', 'No data found for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      ui.alert('No Valid Data', 'No valid data to process for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Report generated successfully!\n\nDate range: ${startDate} to ${endDate}`, ui.ButtonSet.OK);
  } catch (e) {
    console.error('Error generating report for date range:', e);
    ui.alert(
      'Error', 
      'Error generating report:\n\n' + e.toString() + '\n\nPlease check:\n' +
      '1. Your internet connection\n' +
      '2. The API token is still valid\n' +
      '3. Try a smaller date range',
      ui.ButtonSet.OK
    );
  }
}

/**
 * Update all data to current - fetches from first existing week to current date
 */
function updateAllDataToCurrent() {
  const ui = SpreadsheetApp.getUi();
  const config = getCurrentConfig();
  const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
  const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
  
  if (!sheet || sheet.getLastRow() < 2) {
    ui.alert('No existing data found. Please create a report first.');
    return;
  }
  
  try {
    // Expand all groups first to ensure we can read all data
    expandAllGroups(sheet);
    
    // Save existing comments first
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    // Find the earliest week in the sheet
    let earliestDate = null;
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === 'WEEK') {
        const weekRange = data[i][1];
        const [startStr, endStr] = weekRange.split(' - ');
        const startDate = new Date(startStr);
        if (!earliestDate || startDate < earliestDate) {
          earliestDate = startDate;
        }
      }
    }
    
    if (!earliestDate) {
      ui.alert('No week data found in the sheet.');
      return;
    }
    
    // Calculate date range from earliest date to yesterday (excluding current incomplete week)
    const today = new Date();
    const dayOfWeek = today.getDay();
    let endDate;
    if (dayOfWeek === 0) {
      // Today is Sunday, include up to yesterday (Saturday)
      endDate = new Date(today);
      endDate.setDate(today.getDate() - 1);
    } else {
      // Today is Mon-Sat, include up to last Saturday
      const daysFromLastSaturday = dayOfWeek === 0 ? 1 : dayOfWeek;
      endDate = new Date(today);
      endDate.setDate(today.getDate() - daysFromLastSaturday);
    }
    
    const dateRange = {
      from: formatDateForAPI(earliestDate),
      to: formatDateForAPI(endDate)
    };
    
    // Fetch all data for the complete range
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No data found for the date range.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    
    if (Object.keys(processed).length === 0) {
      ui.alert('No valid data to process.');
      return;
    }
    
    // Clear old data silently
    clearAllDataSilent();
    
    // Create updated report
    createEnhancedPivotTable(processed);
    
    // Restore comments
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Successfully updated all data from ${dateRange.from} to ${dateRange.to}!`, ui.ButtonSet.OK);
    
  } catch (e) {
    console.error('Error updating data:', e);
    ui.alert('Error', 'Error updating data: ' + e.toString(), ui.ButtonSet.OK);
  }
}
