/**
 * Analytics Functions - Multi Project Support
 * Contains all analytical calculations and metrics
 * Updated with project-specific Growth Status thresholds
 */

/**
 * Calculate Week-over-Week metrics per app and per sourceApp
 */
function calculateWoWMetrics(appData) {
  if (!appData || typeof appData !== 'object') {
    console.error('Invalid appData provided to calculateWoWMetrics');
    return { sourceAppWoW: {}, appWeekWoW: {} };
  }

  try {
    const sourceAppData = {};
    const appWeekData = {};

    // Aggregate raw data
    Object.values(appData).forEach(app => {
      appWeekData[app.appName] = {};
      Object.values(app.weeks).forEach(week => {
        const spend = week.campaigns.reduce((s, c) => s + c.spend, 0);
        const profit = week.campaigns.reduce((s, c) => s + c.eProfitForecast, 0);
        appWeekData[app.appName][week.weekStart] = { weekStart: week.weekStart, spend, profit };

        week.campaigns.forEach(c => {
          if (c.sourceApp) {
            const key = `${c.sourceApp}_${week.weekStart}`;
            if (!sourceAppData[key]) {
              sourceAppData[key] = { 
                sourceApp: c.sourceApp, 
                weekStart: week.weekStart, 
                spend: 0, 
                eRoasForecast: 0, 
                eProfitForecast: 0, 
                count: 0 
              };
            }
            sourceAppData[key].spend += c.spend;
            sourceAppData[key].eRoasForecast += c.eRoasForecast;
            sourceAppData[key].eProfitForecast += c.eProfitForecast;
            sourceAppData[key].count += 1;
          }
        });
      });
    });

    // Compute sourceApp WoW
    const sourceApps = {};
    Object.values(sourceAppData).forEach(d => {
      if (d.count) d.eRoasForecast /= d.count;
      if (!sourceApps[d.sourceApp]) sourceApps[d.sourceApp] = [];
      sourceApps[d.sourceApp].push(d);
    });

    const sourceAppWoW = {};
    Object.keys(sourceApps).forEach(sourceAppName => {
      sourceApps[sourceAppName].sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      sourceApps[sourceAppName].forEach((curr, i) => {
        const key = `${sourceAppName}_${curr.weekStart}`;
        sourceAppWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = sourceApps[sourceAppName][i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.eProfitForecast ? ((curr.eProfitForecast - prev.eProfitForecast) / Math.abs(prev.eProfitForecast)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct);
          sourceAppWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    // Compute app-level WoW
    const appWeekWoW = {};
    Object.keys(appWeekData).forEach(appName => {
      const weeks = Object.values(appWeekData[appName]).sort((a, b) => new Date(a.weekStart) - new Date(b.weekStart));
      weeks.forEach((curr, i) => {
        const key = `${appName}_${curr.weekStart}`;
        appWeekWoW[key] = { 
          spendChangePercent: 0, 
          eProfitChangePercent: 0, 
          growthStatus: 'First Week' 
        };
        
        if (i > 0) {
          const prev = weeks[i - 1];
          const spendPct = prev.spend ? ((curr.spend - prev.spend) / Math.abs(prev.spend)) * 100 : 0;
          const profitPct = prev.profit ? ((curr.profit - prev.profit) / Math.abs(prev.profit)) * 100 : 0;
          
          const status = calculateGrowthStatus(prev, curr, spendPct, profitPct, 'profit');
          appWeekWoW[key] = { 
            spendChangePercent: spendPct, 
            eProfitChangePercent: profitPct, 
            growthStatus: status 
          };
        }
      });
    });

    return { sourceAppWoW, appWeekWoW };
  } catch (error) {
    console.error('Error calculating WoW metrics:', error);
    return { sourceAppWoW: {}, appWeekWoW: {} };
  }
}

/**
 * Calculate growth status based on spend and profit changes using project-specific thresholds
 * FIXED: Better handling of profit decline scenarios
 */
function calculateGrowthStatus(prev, curr, spendPct, profitPct, profitField = 'eProfitForecast') {
  const prevProfit = profitField === 'profit' ? prev.profit : prev.eProfitForecast;
  const currProfit = profitField === 'profit' ? curr.profit : curr.eProfitForecast;
  
  // Get project-specific thresholds
  const thresholds = getGrowthThresholds(CURRENT_PROJECT);
  
  // Transition from negative to positive profit (always healthy regardless of thresholds)
  if (prevProfit < 0 && currProfit > 0) {
    return 'ðŸŸ¢ Healthy Growth';
  }
  
  // Transition from positive to negative profit (always inefficient regardless of thresholds)
  if (prevProfit > 0 && currProfit < 0) {
    return 'ðŸ”´ Inefficient Growth';
  }
  
  // PRIORITY 1: Check for significant profit decline (regardless of spend change)
  // If profit drops significantly, it's always concerning
  if (profitPct < thresholds.inefficientGrowth.maxProfitChange) {
    return 'ðŸ”´ Inefficient Growth';
  }
  
  // PRIORITY 2: Check for healthy growth pattern
  // High spend increase with good profit growth
  if (spendPct > thresholds.healthyGrowth.minSpendChange && 
      profitPct > thresholds.healthyGrowth.minProfitChange) {
    return 'ðŸŸ¢ Healthy Growth';
  }
  
  // PRIORITY 3: Check for scaling down (significant spend reduction)
  if (spendPct < thresholds.scalingDown.maxSpendChange) {
    return 'ðŸ”µ Scaling Down';
  }
  
  // PRIORITY 4: Check for moderate positive growth
  if (spendPct > thresholds.moderateGrowthSpend && 
      profitPct > thresholds.moderateGrowthProfit) {
    return 'ðŸŸ¡ Moderate Growth';
  }
  
  // PRIORITY 5: Check for concerning patterns even with moderate changes
  
  // Case: Spend increases moderately but profit declines
  if (spendPct > 5 && profitPct < -2) {
    return 'ðŸŸ  Declining Efficiency';
  }
  
  // Case: Spend stays same/increases slightly but profit drops significantly
  if (spendPct >= -2 && profitPct < -10) {
    return 'ðŸŸ  Declining Efficiency';
  }
  
  // Case: Both spend and profit are declining moderately
  if (spendPct < -5 && profitPct < -5 && spendPct > thresholds.scalingDown.maxSpendChange) {
    return 'ðŸŸ¡ Moderate Decline';
  }
  
  // Case: Positive but minimal growth
  if (spendPct > 0 && profitPct > 0 && 
      (spendPct <= thresholds.moderateGrowthSpend || profitPct <= thresholds.moderateGrowthProfit)) {
    return 'ðŸŸ¡ Minimal Growth';
  }
  
  // Everything else is stable
  return 'âšª Stable';
}

/**
 * Get updated growth status explanation for current project
 */
function getGrowthStatusExplanation() {
  const thresholds = getGrowthThresholds(CURRENT_PROJECT);
  
  return `Growth Status Criteria for ${CURRENT_PROJECT}:

ðŸŸ¢ Healthy Growth:
â€¢ Spend increase > ${thresholds.healthyGrowth.minSpendChange}% AND profit increase > ${thresholds.healthyGrowth.minProfitChange}%
â€¢ OR transition from negative to positive profit

ðŸ”´ Inefficient Growth:
â€¢ Profit decrease < ${thresholds.inefficientGrowth.maxProfitChange}% (regardless of spend)
â€¢ OR transition from positive to negative profit

ðŸŸ  Declining Efficiency:
â€¢ Spend increase >5% but profit decrease <-2%
â€¢ OR spend stable (>-2%) but profit drops <-10%

ðŸ”µ Scaling Down:
â€¢ Spend decrease < ${thresholds.scalingDown.maxSpendChange}%

ðŸŸ¡ Moderate Growth:
â€¢ Spend increase > ${thresholds.moderateGrowthSpend}% AND profit increase > ${thresholds.moderateGrowthProfit}%

ðŸŸ¡ Minimal Growth:
â€¢ Small positive changes in both spend and profit

ðŸŸ¡ Moderate Decline:
â€¢ Both spend and profit declining moderately (>-5% but not scaling down)

âšª Stable:
â€¢ Small changes in both directions, no clear trend`;
}

/**
 * Get growth status explanation for specific project
 */
function getProjectGrowthStatusExplanation(projectName) {
  const originalProject = CURRENT_PROJECT;
  setCurrentProject(projectName);
  
  try {
    return getGrowthStatusExplanation();
  } finally {
    setCurrentProject(originalProject);
  }
}

/**
 * Main: generate report for the last N days without progress indicators
 */
function generateReport(days) {
  try {
    const config = getCurrentConfig(); // Use current project config
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Calculate date range
    const dateRange = getDateRange(days);
    
    // Fetch data from API
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      SpreadsheetApp.getUi().alert('No data found for the specified period.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      SpreadsheetApp.getUi().alert('No valid data to process.');
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
  } catch (e) {
    console.error('Error generating report:', e);
    SpreadsheetApp.getUi().alert('Error', 'Error generating report: ' + e.toString(), SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Generate report for specific date range without progress indicators
 */
function generateReportForDateRange(startDate, endDate) {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const config = getCurrentConfig(); // Use current project config
    
    // Save existing comments first
    const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
    const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
    
    if (sheet && sheet.getLastRow() > 1) {
      expandAllGroups(sheet);
      const cache = new CommentCache();
      cache.syncCommentsFromSheet();
    } else {
      const cache = new CommentCache();
    }
    
    // Fetch data from API
    const dateRange = { from: startDate, to: endDate };
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No Data', 'No data found for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    if (Object.keys(processed).length === 0) {
      ui.alert('No Valid Data', 'No valid data to process for the selected date range.', ui.ButtonSet.OK);
      return;
    }
    
    // Clear and create report
    clearAllDataSilent();
    createEnhancedPivotTable(processed);
    
    // Restore comments
    const cache = new CommentCache();
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Report generated successfully!\n\nDate range: ${startDate} to ${endDate}`, ui.ButtonSet.OK);
  } catch (e) {
    console.error('Error generating report for date range:', e);
    ui.alert(
      'Error', 
      'Error generating report:\n\n' + e.toString() + '\n\nPlease check:\n' +
      '1. Your internet connection\n' +
      '2. The API token is still valid\n' +
      '3. Try a smaller date range',
      ui.ButtonSet.OK
    );
  }
}

/**
 * Update all data to current - fetches from first existing week to current date
 */
function updateAllDataToCurrent() {
  const ui = SpreadsheetApp.getUi();
  const config = getCurrentConfig(); // Use current project config
  const spreadsheet = SpreadsheetApp.openById(config.SHEET_ID);
  const sheet = spreadsheet.getSheetByName(config.SHEET_NAME);
  
  if (!sheet || sheet.getLastRow() < 2) {
    ui.alert('No existing data found. Please create a report first.');
    return;
  }
  
  try {
    // Expand all groups first to ensure we can read all data
    expandAllGroups(sheet);
    
    // Save existing comments first
    const cache = new CommentCache();
    cache.syncCommentsFromSheet();
    
    // Find the earliest week in the sheet
    let earliestDate = null;
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === 'WEEK') {
        const weekRange = data[i][1];
        const [startStr, endStr] = weekRange.split(' - ');
        const startDate = new Date(startStr);
        if (!earliestDate || startDate < earliestDate) {
          earliestDate = startDate;
        }
      }
    }
    
    if (!earliestDate) {
      ui.alert('No week data found in the sheet.');
      return;
    }
    
    // Calculate date range from earliest date to yesterday (excluding current incomplete week)
    const today = new Date();
    const dayOfWeek = today.getDay();
    // If today is Sunday (0), we include up to Saturday (yesterday)
    // Otherwise, we include up to last Saturday
    let endDate;
    if (dayOfWeek === 0) {
      // Today is Sunday, include up to yesterday (Saturday)
      endDate = new Date(today);
      endDate.setDate(today.getDate() - 1);
    } else {
      // Today is Mon-Sat, include up to last Saturday
      const daysFromLastSaturday = dayOfWeek === 0 ? 1 : dayOfWeek;
      endDate = new Date(today);
      endDate.setDate(today.getDate() - daysFromLastSaturday);
    }
    
    const dateRange = {
      from: formatDateForAPI(earliestDate),
      to: formatDateForAPI(endDate)
    };
    
    // Fetch all data for the complete range
    const raw = fetchCampaignData(dateRange);
    
    if (!raw.data?.analytics?.richStats?.stats?.length) {
      ui.alert('No data found for the date range.');
      return;
    }
    
    // Process data
    const processed = processApiData(raw);
    
    if (Object.keys(processed).length === 0) {
      ui.alert('No valid data to process.');
      return;
    }
    
    // Clear old data silently
    clearAllDataSilent();
    
    // Create updated report
    createEnhancedPivotTable(processed);
    
    // Restore comments
    cache.applyCommentsToSheet();
    
    ui.alert('Success', `Successfully updated all data from ${dateRange.from} to ${dateRange.to}!`, ui.ButtonSet.OK);
    
  } catch (e) {
    console.error('Error updating data:', e);
    ui.alert('Error', 'Error updating data: ' + e.toString(), ui.ButtonSet.OK);
  }
}
